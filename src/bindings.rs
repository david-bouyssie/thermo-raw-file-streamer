#![allow(warnings, unused)]

/* automatically generated by rust-bindgen 0.68.1 */


#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}

// --- LIBC BINDINGS --- //

pub const __GNUC_VA_LIST: u32 = 1;
pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const _MAX_ITOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: u32 = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: u32 = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: u32 = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: u32 = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: u32 = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: u32 = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: u32 = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: u32 = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: u32 = 65;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MIN: i32 = -128;
pub const SCHAR_MAX: u32 = 127;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MIN: i32 = -128;
pub const CHAR_MAX: u32 = 127;
pub const MB_LEN_MAX: u32 = 5;
pub const SHRT_MIN: i32 = -32768;
pub const SHRT_MAX: u32 = 32767;
pub const USHRT_MAX: u32 = 65535;
pub const INT_MIN: i32 = -2147483648;
pub const INT_MAX: u32 = 2147483647;
pub const UINT_MAX: u32 = 4294967295;
pub const LONG_MIN: i32 = -2147483648;
pub const LONG_MAX: u32 = 2147483647;
pub const ULONG_MAX: u32 = 4294967295;
pub const EXIT_SUCCESS: u32 = 0;
pub const EXIT_FAILURE: u32 = 1;
pub const _WRITE_ABORT_MSG: u32 = 1;
pub const _CALL_REPORTFAULT: u32 = 2;
pub const _OUT_TO_DEFAULT: u32 = 0;
pub const _OUT_TO_STDERR: u32 = 1;
pub const _OUT_TO_MSGBOX: u32 = 2;
pub const _REPORT_ERRMODE: u32 = 3;
pub const RAND_MAX: u32 = 32767;
pub const _CVTBUFSIZE: u32 = 349;
pub const _MAX_PATH: u32 = 260;
pub const _MAX_DRIVE: u32 = 3;
pub const _MAX_DIR: u32 = 256;
pub const _MAX_FNAME: u32 = 256;
pub const _MAX_EXT: u32 = 256;
pub const _MAX_ENV: u32 = 32767;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const EDEADLK: u32 = 36;
pub const ENAMETOOLONG: u32 = 38;
pub const ENOLCK: u32 = 39;
pub const ENOSYS: u32 = 40;
pub const ENOTEMPTY: u32 = 41;
pub const EINVAL: u32 = 22;
pub const ERANGE: u32 = 34;
pub const EILSEQ: u32 = 42;
pub const STRUNCATE: u32 = 80;
pub const EDEADLOCK: u32 = 36;
pub const EADDRINUSE: u32 = 100;
pub const EADDRNOTAVAIL: u32 = 101;
pub const EAFNOSUPPORT: u32 = 102;
pub const EALREADY: u32 = 103;
pub const EBADMSG: u32 = 104;
pub const ECANCELED: u32 = 105;
pub const ECONNABORTED: u32 = 106;
pub const ECONNREFUSED: u32 = 107;
pub const ECONNRESET: u32 = 108;
pub const EDESTADDRREQ: u32 = 109;
pub const EHOSTUNREACH: u32 = 110;
pub const EIDRM: u32 = 111;
pub const EINPROGRESS: u32 = 112;
pub const EISCONN: u32 = 113;
pub const ELOOP: u32 = 114;
pub const EMSGSIZE: u32 = 115;
pub const ENETDOWN: u32 = 116;
pub const ENETRESET: u32 = 117;
pub const ENETUNREACH: u32 = 118;
pub const ENOBUFS: u32 = 119;
pub const ENODATA: u32 = 120;
pub const ENOLINK: u32 = 121;
pub const ENOMSG: u32 = 122;
pub const ENOPROTOOPT: u32 = 123;
pub const ENOSR: u32 = 124;
pub const ENOSTR: u32 = 125;
pub const ENOTCONN: u32 = 126;
pub const ENOTRECOVERABLE: u32 = 127;
pub const ENOTSOCK: u32 = 128;
pub const ENOTSUP: u32 = 129;
pub const EOPNOTSUPP: u32 = 130;
pub const EOTHER: u32 = 131;
pub const EOVERFLOW: u32 = 132;
pub const EOWNERDEAD: u32 = 133;
pub const EPROTO: u32 = 134;
pub const EPROTONOSUPPORT: u32 = 135;
pub const EPROTOTYPE: u32 = 136;
pub const ETIME: u32 = 137;
pub const ETIMEDOUT: u32 = 138;
pub const ETXTBSY: u32 = 139;
pub const EWOULDBLOCK: u32 = 140;
pub const _NLSCMPERROR: u32 = 2147483647;
pub const _CRT_INTERNAL_STDIO_SYMBOL_PREFIX: &[u8; 1] = b"\0";
pub const _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION: u32 = 1;
pub const _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR: u32 = 2;
pub const _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS: u32 = 4;
pub const _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 8;
pub const _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS: u32 = 16;
pub const _CRT_INTERNAL_SCANF_SECURECRT: u32 = 1;
pub const _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS: u32 = 2;
pub const _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY: u32 = 4;
pub const BUFSIZ: u32 = 512;
pub const _NSTREAM_: u32 = 512;
pub const _IOB_ENTRIES: u32 = 3;
pub const EOF: i32 = -1;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 64;
pub const _IONBF: u32 = 4;
pub const L_tmpnam: u32 = 260;
pub const L_tmpnam_s: u32 = 260;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_SET: u32 = 0;
pub const FILENAME_MAX: u32 = 260;
pub const FOPEN_MAX: u32 = 20;
pub const _SYS_OPEN: u32 = 20;
pub const TMP_MAX: u32 = 2147483647;
pub const TMP_MAX_S: u32 = 2147483647;
pub const _TMP_MAX_S: u32 = 2147483647;
pub const SYS_OPEN: u32 = 20;
pub const _UPPER: u32 = 1;
pub const _LOWER: u32 = 2;
pub const _DIGIT: u32 = 4;
pub const _SPACE: u32 = 8;
pub const _PUNCT: u32 = 16;
pub const _CONTROL: u32 = 32;
pub const _BLANK: u32 = 64;
pub const _HEX: u32 = 128;
pub const _LEADBYTE: u32 = 32768;
pub const _ALPHA: u32 = 259;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const __EGLIB_X11: u32 = 1;
pub const FALSE: u32 = 0;
pub const TRUE: u32 = 1;
pub const G_MINSHORT: i32 = -32768;
pub const G_MAXSHORT: u32 = 32767;
pub const G_MAXUSHORT: u32 = 65535;
pub const G_MAXINT: u32 = 2147483647;
pub const G_MININT: i32 = -2147483648;
pub const G_LITTLE_ENDIAN: u32 = 1234;
pub const G_BIG_ENDIAN: u32 = 4321;
pub const G_USEC_PER_SEC: u32 = 1000000;
pub const G_DIR_SEPARATOR: u8 = 92u8;
pub const G_DIR_SEPARATOR_S: &[u8; 2] = b"\\\0";
pub const _EGLIB_MAJOR: u32 = 2;
pub const _EGLIB_MIDDLE: u32 = 4;
pub const _EGLIB_MINOR: u32 = 0;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _SH_DENYRW: u32 = 16;
pub const _SH_DENYWR: u32 = 32;
pub const _SH_DENYRD: u32 = 48;
pub const _SH_DENYNO: u32 = 64;
pub const _SH_SECURE: u32 = 128;
pub const SH_DENYRW: u32 = 16;
pub const SH_DENYWR: u32 = 32;
pub const SH_DENYRD: u32 = 48;
pub const SH_DENYNO: u32 = 64;
pub const _S_IFMT: u32 = 61440;
pub const _S_IFDIR: u32 = 16384;
pub const _S_IFCHR: u32 = 8192;
pub const _S_IFIFO: u32 = 4096;
pub const _S_IFREG: u32 = 32768;
pub const _S_IREAD: u32 = 256;
pub const _S_IWRITE: u32 = 128;
pub const _S_IEXEC: u32 = 64;
pub const S_IFMT: u32 = 61440;
pub const S_IFDIR: u32 = 16384;
pub const S_IFCHR: u32 = 8192;
pub const S_IFREG: u32 = 32768;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const MONO_ALLOCATOR_VTABLE_VERSION: u32 = 1;
pub const MONO_ZERO_LEN_ARRAY: u32 = 1;
pub const _MONO_METADATA_LOADER_H_: u32 = 1;
pub const MONO_DECLSEC_ACTION_MIN: u32 = 1;
pub const MONO_DECLSEC_ACTION_MAX: u32 = 18;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
extern "C" {
    pub fn __va_start(arg1: *mut *mut ::std::os::raw::c_char, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize) -> !;
}
extern "C" {
    pub static mut __security_cookie: usize;
}
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn() -> !;
}
extern "C" {
    pub fn _invoke_watson(
        _Expression: *const wchar_t,
        _FunctionName: *const wchar_t,
        _FileName: *const wchar_t,
        _LineNo: ::std::os::raw::c_uint,
        _Reserved: usize,
    ) -> !;
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}

pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(
        _Count: ::std::os::raw::c_ulonglong,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: ::std::os::raw::c_ulonglong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(
        _Block: *mut ::std::os::raw::c_void,
        _Alignment: usize,
        _Offset: usize,
    ) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
        _Offset: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(
        _Block: *mut ::std::os::raw::c_void,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(
        _Block: *mut ::std::os::raw::c_void,
        _Count: usize,
        _Size: usize,
        _Alignment: usize,
    ) -> *mut ::std::os::raw::c_void;
}
pub type max_align_t = f64;
pub type _CoreCrtSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type _CoreCrtNonSecureSearchSortCompareFunction = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn bsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: rsize_t,
        _SizeOfElements: rsize_t,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: usize,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    );
}
extern "C" {
    pub fn _lfind_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: usize,
        _CompareFunction: _CoreCrtSecureSearchSortCompareFunction,
        _Context: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(
        _Key: *const ::std::os::raw::c_void,
        _Base: *const ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(
        _Key: *const ::std::os::raw::c_void,
        _Base: *mut ::std::os::raw::c_void,
        _NumOfElements: *mut ::std::os::raw::c_uint,
        _SizeOfElements: ::std::os::raw::c_uint,
        _CompareFunction: _CoreCrtNonSecureSearchSortCompareFunction,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itow(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltow(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultow(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstol(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstold_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64tow(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(
        _String: *const wchar_t,
        _EndPtr: *mut *mut wchar_t,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(
        _Buffer: *mut wchar_t,
        _Path: *const wchar_t,
        _BufferCount: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wmakepath(
        _Buffer: *mut wchar_t,
        _Drive: *const wchar_t,
        _Dir: *const wchar_t,
        _Filename: *const wchar_t,
        _Ext: *const wchar_t,
    );
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _Dir: *mut wchar_t,
        _Filename: *mut wchar_t,
        _Ext: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsplitpath_s(
        _FullPath: *const wchar_t,
        _Drive: *mut wchar_t,
        _DriveCount: usize,
        _Dir: *mut wchar_t,
        _DirCount: usize,
        _Filename: *mut wchar_t,
        _FilenameCount: usize,
        _Ext: *mut wchar_t,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(
        _Buffer: *mut *mut wchar_t,
        _BufferCount: *mut usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _VarName: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(
        _Filename: *const wchar_t,
        _VarName: *const wchar_t,
        _ResultPath: *mut wchar_t,
    );
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn _set_abort_behavior(
        _Flags: ::std::os::raw::c_uint,
        _Mask: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_uint;
}
pub type _onexit_t = ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const wchar_t,
        arg2: *const wchar_t,
        arg3: *const wchar_t,
        arg4: ::std::os::raw::c_uint,
        arg5: usize,
    ),
>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler) -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(
        _Handler: _invalid_parameter_handler,
    ) -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}

pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int, _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long, _Denominator: ::std::os::raw::c_long)
        -> ldiv_t;
}
extern "C" {
    pub fn lldiv(
        _Numerator: ::std::os::raw::c_longlong,
        _Denominator: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        _Value: ::std::os::raw::c_uint,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(
        _Value: ::std::os::raw::c_ulong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(
        _Value: ::std::os::raw::c_ulonglong,
        _Shift: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _atoi_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(
        _Result: *mut _CRT_FLOAT,
        _String: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(
        _Result: *mut _CRT_DOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(
        _Result: *mut _LDOUBLE,
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn _strtof_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtod(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtod_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtold(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn _strtold_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtol(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(
        _String: *const ::std::os::raw::c_char,
        _EndPtr: *mut *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _i64toa(
        _Value: ::std::os::raw::c_longlong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Radix: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ui64toa(
        _Value: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(_Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(
        _Ch: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(
        _String: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SrcSizeInBytes: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _DstBuf: *mut wchar_t,
        _SizeInWords: usize,
        _SrcBuf: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(
        _Dest: *mut wchar_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(
        _MbCh: *mut ::std::os::raw::c_char,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _WCh: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(
        _SizeConverted: *mut ::std::os::raw::c_int,
        _MbCh: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _WCh: wchar_t,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstombs(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
    ) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(
        _PtNumOfCharConverted: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _DstSizeInBytes: usize,
        _Src: *const wchar_t,
        _MaxCountInBytes: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _fullpath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Path: *const ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _makepath(
        _Buffer: *mut ::std::os::raw::c_char,
        _Drive: *const ::std::os::raw::c_char,
        _Dir: *const ::std::os::raw::c_char,
        _Filename: *const ::std::os::raw::c_char,
        _Ext: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _Dir: *mut ::std::os::raw::c_char,
        _Filename: *mut ::std::os::raw::c_char,
        _Ext: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _splitpath_s(
        _FullPath: *const ::std::os::raw::c_char,
        _Drive: *mut ::std::os::raw::c_char,
        _DriveCount: usize,
        _Dir: *mut ::std::os::raw::c_char,
        _DirCount: usize,
        _Filename: *mut ::std::os::raw::c_char,
        _FilenameCount: usize,
        _Ext: *mut ::std::os::raw::c_char,
        _ExtCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn getenv_s(
        _RequiredCount: *mut usize,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: rsize_t,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(
        _Buffer: *mut *mut ::std::os::raw::c_char,
        _BufferCount: *mut usize,
        _VarName: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(
        _Name: *const ::std::os::raw::c_char,
        _Value: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _searchenv(
        _Filename: *const ::std::os::raw::c_char,
        _VarName: *const ::std::os::raw::c_char,
        _Buffer: *mut ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint, _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(
        _Value: f64,
        _FractionalDigitCount: ::std::os::raw::c_int,
        _PtDec: *mut ::std::os::raw::c_int,
        _PtSign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        _Value: f64,
        _DigitCount: ::std::os::raw::c_int,
        _DstBuf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(
        _Value: ::std::os::raw::c_int,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(
        _Value: ::std::os::raw::c_long,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        _Buf1: *mut ::std::os::raw::c_char,
        _Buf2: *mut ::std::os::raw::c_char,
        _SizeInBytes: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ultoa(
        _Value: ::std::os::raw::c_ulong,
        _Buffer: *mut ::std::os::raw::c_char,
        _Radix: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::std::os::raw::c_char,
        _Val: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::std::os::raw::c_char,
        _Ch: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::std::os::raw::c_char,
        _SubStr: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::std::os::raw::c_ushort,
        _Ch: ::std::os::raw::c_ushort,
    ) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _Size: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::std::os::raw::c_void,
        _Buf2: *const ::std::os::raw::c_void,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy_s(
        _Destination: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Source: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcstok_s(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(_Destination: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_String: *const ::std::os::raw::c_ushort) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _String1: *const ::std::os::raw::c_ushort,
        _String2: *const ::std::os::raw::c_ushort,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_String: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_String: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcstok(
        _String: *mut wchar_t,
        _Delimiter: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrorNumber: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrorMessage: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Destination: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(_Destination: *mut wchar_t, _SizeInWords: usize, _Value: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_String: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(_String: *mut wchar_t, _SizeInWords: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_String: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_String: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Destination: *mut wchar_t, _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Destination: *mut wchar_t,
        _Source: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsdup(_String: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _String1: *const wchar_t,
        _String2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnset(_String: *mut wchar_t, _Value: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_String: *mut wchar_t, _Value: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_String1: *const wchar_t, _String2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorNumber: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy_s(
        _Destination: *mut ::std::os::raw::c_char,
        _SizeInBytes: rsize_t,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strtok_s(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
        _Context: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::std::os::raw::c_void,
        _Src: *const ::std::os::raw::c_void,
        _Val: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strdup(_Source: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror(_ErrorMessage: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _ErrorMessage: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(_ErrorMessage: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strlwr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::std::os::raw::c_char,
        _Str2: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __strncnt(_String: *const ::std::os::raw::c_char, _Count: usize) -> usize;
}
extern "C" {
    pub fn strncpy(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _Count: ::std::os::raw::c_ulonglong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(_String: *const ::std::os::raw::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _strnset_s(
        _String: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _Count: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strset_s(
        _Destination: *mut ::std::os::raw::c_char,
        _DestinationSize: usize,
        _Value: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Destination: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::std::os::raw::c_char,
        _Control: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtok(
        _String: *mut ::std::os::raw::c_char,
        _Delimiter: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s(_String: *mut ::std::os::raw::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _String: *mut ::std::os::raw::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::std::os::raw::c_char,
        _Locale: _locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_ulonglong,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Destination: *mut ::std::os::raw::c_char,
        _Source: *const ::std::os::raw::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_String: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmpi(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stricmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strlwr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnicmp(
        _String1: *const ::std::os::raw::c_char,
        _String2: *const ::std::os::raw::c_char,
        _MaxCount: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
        _MaxCount: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrev(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strset(
        _String: *mut ::std::os::raw::c_char,
        _Value: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strupr(_String: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _iobuf {
    pub _Placeholder: *mut ::std::os::raw::c_void,
}
pub type FILE = _iobuf;
extern "C" {
    pub fn __acrt_iob_func(_Ix: ::std::os::raw::c_uint) -> *mut FILE;
}
extern "C" {
    pub fn fgetwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fgetwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn getwc(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fgetws(
        _Buffer: *mut wchar_t,
        _BufferCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(_Buffer: *const wchar_t, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getws_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn putwc(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _putws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _wfdopen(_FileHandle: ::std::os::raw::c_int, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen(_FileName: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wfopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfreopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wfreopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn _wfsopen(
        _FileName: *const wchar_t,
        _Mode: *const wchar_t,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _wpopen(_Command: *const wchar_t, _Mode: *const wchar_t) -> *mut FILE;
}
extern "C" {
    pub fn _wremove(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtempnam(_Directory: *const wchar_t, _FilePrefix: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wtmpnam_s(_Buffer: *mut wchar_t, _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wtmpnam(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _fgetwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _fputwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _getwc_nolock(_Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _putwc_nolock(_Character: wchar_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn _ungetwc_nolock(_Character: wint_t, _Stream: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn __stdio_common_vfwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vswscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const wchar_t,
        _BufferCount: usize,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = ::std::os::raw::c_longlong;
extern "C" {
    pub fn _get_stream_buffer_pointers(
        _Stream: *mut FILE,
        _Base: *mut *mut *mut ::std::os::raw::c_char,
        _Pointer: *mut *mut *mut ::std::os::raw::c_char,
        _Count: *mut *mut ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn clearerr_s(_Stream: *mut FILE) -> errno_t;
}
extern "C" {
    pub fn fopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn fread_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen_s(
        _Stream: *mut *mut FILE,
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _OldStream: *mut FILE,
    ) -> errno_t;
}
extern "C" {
    pub fn gets_s(
        _Buffer: *mut ::std::os::raw::c_char,
        _Size: rsize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile_s(_Stream: *mut *mut FILE) -> errno_t;
}
extern "C" {
    pub fn tmpnam_s(_Buffer: *mut ::std::os::raw::c_char, _Size: rsize_t) -> errno_t;
}
extern "C" {
    pub fn clearerr(_Stream: *mut FILE);
}
extern "C" {
    pub fn fclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn feof(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(_Stream: *mut FILE, _Position: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        _Buffer: *mut ::std::os::raw::c_char,
        _MaxCount: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fputc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(
        _Buffer: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn freopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _Stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn _fsopen(
        _FileName: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
        _ShFlag: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fsetpos(_Stream: *mut FILE, _Position: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fwrite(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: ::std::os::raw::c_ulonglong,
        _ElementCount: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn getc(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getmaxstdio() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _pclose(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _popen(
        _Command: *const ::std::os::raw::c_char,
        _Mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn putc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(_Character: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(_Buffer: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putw(_Word: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        _OldFileName: *const ::std::os::raw::c_char,
        _NewFileName: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unlink(_FileName: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(_Stream: *mut FILE);
}
extern "C" {
    pub fn _rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(_Stream: *mut FILE, _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _setmaxstdio(_Maximum: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setvbuf(
        _Stream: *mut FILE,
        _Buffer: *mut ::std::os::raw::c_char,
        _Mode: ::std::os::raw::c_int,
        _Size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tempnam(
        _DirectoryName: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(_Buffer: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(_Character: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _lock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _unlock_file(_Stream: *mut FILE);
}
extern "C" {
    pub fn _fclose_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fflush_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fgetc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fputc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fread_nolock(
        _Buffer: *mut ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fread_nolock_s(
        _Buffer: *mut ::std::os::raw::c_void,
        _BufferSize: usize,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _fseek_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_long,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fseeki64_nolock(
        _Stream: *mut FILE,
        _Offset: ::std::os::raw::c_longlong,
        _Origin: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ftell_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _ftelli64_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _fwrite_nolock(
        _Buffer: *const ::std::os::raw::c_void,
        _ElementSize: usize,
        _ElementCount: usize,
        _Stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn _getc_nolock(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ungetc_nolock(
        _Character: ::std::os::raw::c_int,
        _Stream: *mut FILE,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p__commode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_printf_count_output(_Value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_printf_count_output() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vfscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Stream: *mut FILE,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _Arglist: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsnprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _MaxCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *mut ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __stdio_common_vsscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Buffer: *const ::std::os::raw::c_char,
        _BufferCount: usize,
        _Format: *const ::std::os::raw::c_char,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        _Directory: *const ::std::os::raw::c_char,
        _FilePrefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcloseall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdopen(
        _FileHandle: ::std::os::raw::c_int,
        _Format: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fgetchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flushall() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputchar(_Ch: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(_Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(_Ch: ::std::os::raw::c_int, _Stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rmtmp() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __pctype_func() -> *const ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn __pwctype_func() -> *const wctype_t;
}
extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswascii(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswblank(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswlower(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswprint(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswspace(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswupper(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswblank_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn _iswctype_l(_C: wint_t, _Type: wctype_t, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isleadbyte(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isleadbyte_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isctype(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isctype_l(
        _C: ::std::os::raw::c_int,
        _Type: ::std::os::raw::c_int,
        _Locale: _locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalpha(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isalpha_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn islower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _islower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isxdigit(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isxdigit_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isspace(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isspace_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ispunct(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _ispunct_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isblank(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isblank_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isalnum(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isalnum_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isprint(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isprint_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isgraph(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _isgraph_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iscntrl(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _iscntrl_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _tolower_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _toupper_l(_C: ::std::os::raw::c_int, _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __isascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toascii(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iscsymf(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __iscsym(_C: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type gint = ::std::os::raw::c_int;
pub type guint = ::std::os::raw::c_uint;
pub type gshort = ::std::os::raw::c_short;
pub type gushort = ::std::os::raw::c_ushort;
pub type glong = ::std::os::raw::c_long;
pub type gulong = ::std::os::raw::c_ulong;
pub type gpointer = *mut ::std::os::raw::c_void;
pub type gconstpointer = *const ::std::os::raw::c_void;
pub type gchar = ::std::os::raw::c_char;
pub type guchar = ::std::os::raw::c_uchar;
pub type gint8 = i8;
pub type guint8 = u8;
pub type gint16 = i16;
pub type guint16 = u16;
pub type gint32 = i32;
pub type guint32 = u32;
pub type gint64 = i64;
pub type guint64 = u64;
pub type gfloat = f32;
pub type gdouble = f64;
pub type gboolean = i32;
pub type gunichar2 = guint16;
pub type gunichar = guint32;
pub type gsize = ::std::os::raw::c_ulong;
pub type gssize = ::std::os::raw::c_long;
extern "C" {
    pub fn g_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn g_realloc(obj: gpointer, size: gsize) -> gpointer;
}
extern "C" {
    pub fn g_malloc(x: gsize) -> gpointer;
}
extern "C" {
    pub fn g_malloc0(x: gsize) -> gpointer;
}
extern "C" {
    pub fn g_calloc(n: gsize, x: gsize) -> gpointer;
}
extern "C" {
    pub fn g_try_malloc(x: gsize) -> gpointer;
}
extern "C" {
    pub fn g_try_realloc(obj: gpointer, size: gsize) -> gpointer;
}
extern "C" {
    pub fn g_memdup(mem: gconstpointer, byte_size: guint) -> gpointer;
}
extern "C" {
    pub fn g_strdup(str_: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn g_strdupv(str_array: *mut *mut gchar) -> *mut *mut gchar;
}
pub type GArray = _GArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GArray {
    pub data: *mut gchar,
    pub len: gint,
}
extern "C" {
    pub fn g_array_new(
        zero_terminated: gboolean,
        clear_: gboolean,
        element_size: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn g_array_sized_new(
        zero_terminated: gboolean,
        clear_: gboolean,
        element_size: guint,
        reserved_size: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn g_array_free(array: *mut GArray, free_segment: gboolean) -> *mut gchar;
}
extern "C" {
    pub fn g_array_append_vals(array: *mut GArray, data: gconstpointer, len: guint) -> *mut GArray;
}
extern "C" {
    pub fn g_array_insert_vals(
        array: *mut GArray,
        index_: guint,
        data: gconstpointer,
        len: guint,
    ) -> *mut GArray;
}
extern "C" {
    pub fn g_array_remove_index(array: *mut GArray, index_: guint) -> *mut GArray;
}
extern "C" {
    pub fn g_array_remove_index_fast(array: *mut GArray, index_: guint) -> *mut GArray;
}
extern "C" {
    pub fn g_array_set_size(array: *mut GArray, length: gint);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GString {
    pub str_: *mut ::std::os::raw::c_char,
    pub len: gsize,
    pub allocated_len: gsize,
}
pub type GString = _GString;
extern "C" {
    pub fn g_string_new(init: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn g_string_new_len(init: *const gchar, len: gssize) -> *mut GString;
}
extern "C" {
    pub fn g_string_sized_new(default_size: gsize) -> *mut GString;
}
extern "C" {
    pub fn g_string_free(string: *mut GString, free_segment: gboolean) -> *mut gchar;
}
extern "C" {
    pub fn g_string_append(string: *mut GString, val: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn g_string_append_c(string: *mut GString, c: gchar) -> *mut GString;
}
extern "C" {
    pub fn g_string_append_len(
        string: *mut GString,
        val: *const gchar,
        len: gssize,
    ) -> *mut GString;
}
extern "C" {
    pub fn g_string_truncate(string: *mut GString, len: gsize) -> *mut GString;
}
extern "C" {
    pub fn g_string_prepend(string: *mut GString, val: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn g_string_insert(string: *mut GString, pos: gssize, val: *const gchar) -> *mut GString;
}
extern "C" {
    pub fn g_string_set_size(string: *mut GString, len: gsize) -> *mut GString;
}
extern "C" {
    pub fn g_string_erase(string: *mut GString, pos: gssize, len: gssize) -> *mut GString;
}
extern "C" {
    pub fn g_string_null(string: *mut GString);
}
extern "C" {
    pub fn g_assertion_message(format: *const gchar, ...);
}
extern "C" {
    pub fn g_build_path(separator: *const gchar, first_element: *const gchar, ...) -> *mut gchar;
}
extern "C" {
    pub fn g_path_get_dirname(filename: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn g_path_get_basename(filename: *const ::std::os::raw::c_char) -> *mut gchar;
}
extern "C" {
    pub fn g_find_program_in_path(program: *const gchar) -> *mut gchar;
}
extern "C" {
    pub fn g_get_current_dir() -> *mut gchar;
}
extern "C" {
    pub fn g_path_is_absolute(filename: *const ::std::os::raw::c_char) -> gboolean;
}
pub type mono_bool = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoAssembly {
    _unused: [u8; 0],
}
pub type MonoAssembly = _MonoAssembly;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoAssemblyName {
    _unused: [u8; 0],
}
pub type MonoAssemblyName = _MonoAssemblyName;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoImage {
    _unused: [u8; 0],
}
pub type MonoImage = _MonoImage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoClass {
    _unused: [u8; 0],
}
pub type MonoClass = _MonoClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoDomain {
    _unused: [u8; 0],
}
pub type MonoDomain = _MonoDomain;
pub type MonoObject = _MonoObject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoMethod {
    _unused: [u8; 0],
}
pub type MonoMethod = _MonoMethod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoString {
    _unused: [u8; 0],
}
pub type MonoString = _MonoString;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoArray {
    _unused: [u8; 0],
}
pub type MonoArray = _MonoArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoException {
    _unused: [u8; 0],
}
pub type MonoException = _MonoException;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoVTable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoClassField {
    _unused: [u8; 0],
}
pub type MonoClassField = _MonoClassField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoMethodDesc {
    _unused: [u8; 0],
}
pub type mono_byte = u8;
pub type MonoBoolean = mono_byte;
extern "C" {
    pub fn _cgetws_s(_Buffer: *mut wchar_t, _BufferCount: usize, _SizeRead: *mut usize) -> errno_t;
}
extern "C" {
    pub fn _cputws(_Buffer: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _getwch() -> wint_t;
}
extern "C" {
    pub fn _getwche() -> wint_t;
}
extern "C" {
    pub fn _putwch(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn _getwch_nolock() -> wint_t;
}
extern "C" {
    pub fn _getwche_nolock() -> wint_t;
}
extern "C" {
    pub fn _putwch_nolock(_Character: wchar_t) -> wint_t;
}
extern "C" {
    pub fn _ungetwch_nolock(_Character: wint_t) -> wint_t;
}
extern "C" {
    pub fn __conio_common_vcwprintf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_s(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwprintf_p(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __conio_common_vcwscanf(
        _Options: ::std::os::raw::c_ulonglong,
        _Format: *const wchar_t,
        _Locale: _locale_t,
        _ArgList: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wgetcwd(_DstBuf: *mut wchar_t, _SizeInWords: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetdcwd(
        _Drive: ::std::os::raw::c_int,
        _DstBuf: *mut wchar_t,
        _SizeInWords: ::std::os::raw::c_int,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wchdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmkdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrmdir(_Path: *const wchar_t) -> ::std::os::raw::c_int;
}
pub type _fsize_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata32i64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time32_t,
    pub time_access: __time32_t,
    pub time_write: __time32_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64i32_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: _fsize_t,
    pub name: [wchar_t; 260usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _wfinddata64_t {
    pub attrib: ::std::os::raw::c_uint,
    pub time_create: __time64_t,
    pub time_access: __time64_t,
    pub time_write: __time64_t,
    pub size: ::std::os::raw::c_longlong,
    pub name: [wchar_t; 260usize],
}
extern "C" {
    pub fn _waccess(
        _FileName: *const wchar_t,
        _AccessMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _waccess_s(_FileName: *const wchar_t, _AccessMode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _wchmod(
        _FileName: *const wchar_t,
        _Mode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wcreat(
        _FileName: *const wchar_t,
        _PermissionMode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindfirst32(_FileName: *const wchar_t, _FindData: *mut _wfinddata32_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wunlink(_FileName: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wrename(
        _OldFileName: *const wchar_t,
        _NewFileName: *const wchar_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wmktemp_s(_TemplateName: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wmktemp(_TemplateName: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wfindfirst32i64(_FileName: *const wchar_t, _FindData: *mut _wfinddata32i64_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64i32(_FileName: *const wchar_t, _FindData: *mut _wfinddata64i32_t) -> isize;
}
extern "C" {
    pub fn _wfindfirst64(_FileName: *const wchar_t, _FindData: *mut _wfinddata64_t) -> isize;
}
extern "C" {
    pub fn _wfindnext32i64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata32i64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64i32(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64i32_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wfindnext64(
        _FindHandle: isize,
        _FindData: *mut _wfinddata64_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen_s(
        _FileHandle: *mut ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        _PermissionFlag: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wsopen_dispatch(
        _FileName: *const wchar_t,
        _OFlag: ::std::os::raw::c_int,
        _ShFlag: ::std::os::raw::c_int,
        _PMode: ::std::os::raw::c_int,
        _PFileHandle: *mut ::std::os::raw::c_int,
        _BSecure: ::std::os::raw::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _wopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wsopen(
        _FileName: *const wchar_t,
        _OpenFlag: ::std::os::raw::c_int,
        _ShareFlag: ::std::os::raw::c_int,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wexecl(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecle(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclp(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexeclpe(_FileName: *const wchar_t, _ArgList: *const wchar_t, ...) -> isize;
}
extern "C" {
    pub fn _wexecv(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecve(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wexecvp(_FileName: *const wchar_t, _ArgList: *const *const wchar_t) -> isize;
}
extern "C" {
    pub fn _wexecvpe(
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnl(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnle(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnlpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const wchar_t,
        ...
    ) -> isize;
}
extern "C" {
    pub fn _wspawnv(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnve(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvp(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
    ) -> isize;
}
extern "C" {
    pub fn _wspawnvpe(
        _Mode: ::std::os::raw::c_int,
        _FileName: *const wchar_t,
        _ArgList: *const *const wchar_t,
        _Env: *const *const wchar_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
}
extern "C" {
    pub fn _wasctime(_Tm: *const tm) -> *mut wchar_t;
}
extern "C" {
    pub fn _wasctime_s(_Buffer: *mut wchar_t, _SizeInWords: usize, _Tm: *const tm) -> errno_t;
}
extern "C" {
    pub fn wcsftime(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn _wcsftime_l(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Format: *const wchar_t,
        _Tm: *const tm,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn _wctime32(_Time: *const __time32_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime32_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time32_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wctime64(_Time: *const __time64_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wctime64_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _Time: *const __time64_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wstrdate_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrdate(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wstrtime_s(_Buffer: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wstrtime(_Buffer: *mut wchar_t) -> *mut wchar_t;
}
pub type _ino_t = ::std::os::raw::c_ushort;
pub type ino_t = _ino_t;
pub type _dev_t = ::std::os::raw::c_uint;
pub type dev_t = _dev_t;
pub type _off_t = ::std::os::raw::c_long;
pub type off_t = _off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat32i64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time32_t,
    pub st_mtime: __time32_t,
    pub st_ctime: __time32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64i32 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stat64 {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: ::std::os::raw::c_longlong,
    pub st_atime: __time64_t,
    pub st_mtime: __time64_t,
    pub st_ctime: __time64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: _dev_t,
    pub st_ino: _ino_t,
    pub st_mode: ::std::os::raw::c_ushort,
    pub st_nlink: ::std::os::raw::c_short,
    pub st_uid: ::std::os::raw::c_short,
    pub st_gid: ::std::os::raw::c_short,
    pub st_rdev: _dev_t,
    pub st_size: _off_t,
    pub st_atime: time_t,
    pub st_mtime: time_t,
    pub st_ctime: time_t,
}
extern "C" {
    pub fn _fstat32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat32i64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64i32(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _fstat64(
        _FileHandle: ::std::os::raw::c_int,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat32i64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat32i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64i32(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64i32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _stat64(
        _FileName: *const ::std::os::raw::c_char,
        _Stat: *mut _stat64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32(_FileName: *const wchar_t, _Stat: *mut _stat32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat32i64(_FileName: *const wchar_t, _Stat: *mut _stat32i64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64i32(_FileName: *const wchar_t, _Stat: *mut _stat64i32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wstat64(_FileName: *const wchar_t, _Stat: *mut _stat64) -> ::std::os::raw::c_int;
}
pub type _Wint_t = wchar_t;
extern "C" {
    pub fn _wsetlocale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcreate_locale(_Category: ::std::os::raw::c_int, _Locale: *const wchar_t) -> _locale_t;
}
extern "C" {
    pub fn btowc(_Ch: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn mbrlen(
        _Ch: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        _DstCh: *mut wchar_t,
        _SrcCh: *const ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsrtowcs_s(
        _Retval: *mut usize,
        _Dst: *mut wchar_t,
        _Size: usize,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _N: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn mbsrtowcs(
        _Dest: *mut wchar_t,
        _PSrc: *mut *const ::std::os::raw::c_char,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Ch: wchar_t,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcrtomb(
        _Dest: *mut ::std::os::raw::c_char,
        _Source: wchar_t,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_s(
        _Retval: *mut usize,
        _Dst: *mut ::std::os::raw::c_char,
        _SizeInBytes: usize,
        _Src: *mut *const wchar_t,
        _Size: usize,
        _State: *mut mbstate_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsrtombs(
        _Dest: *mut ::std::os::raw::c_char,
        _PSource: *mut *const wchar_t,
        _Count: usize,
        _State: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wctob(_WCh: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t) -> errno_t;
}
extern "C" {
    pub fn wmemmove_s(_S1: *mut wchar_t, _N1: rsize_t, _S2: *const wchar_t, _N: rsize_t)
        -> errno_t;
}

// --- MONO BINDINGS --- //

pub type mono_unichar2 = wchar_t;
pub type mono_unichar4 = u32;
pub type MonoFunc = ::std::option::Option<
    unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, user_data: *mut ::std::os::raw::c_void),
>;
pub type MonoHFunc = ::std::option::Option<
    unsafe extern "C" fn(
        key: *mut ::std::os::raw::c_void,
        value: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_free(arg1: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoAllocatorVTable {
    pub version: ::std::os::raw::c_int,
    pub malloc:
        ::std::option::Option<unsafe extern "C" fn(size: usize) -> *mut ::std::os::raw::c_void>,
    pub realloc: ::std::option::Option<
        unsafe extern "C" fn(
            mem: *mut ::std::os::raw::c_void,
            count: usize,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(mem: *mut ::std::os::raw::c_void)>,
    pub calloc: ::std::option::Option<
        unsafe extern "C" fn(count: usize, size: usize) -> *mut ::std::os::raw::c_void,
    >,
}
#[test]
fn bindgen_test_layout_MonoAllocatorVTable() {
    const UNINIT: ::std::mem::MaybeUninit<MonoAllocatorVTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoAllocatorVTable>(),
        40usize,
        concat!("Size of: ", stringify!(MonoAllocatorVTable))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoAllocatorVTable>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoAllocatorVTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).version) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoAllocatorVTable),
            "::",
            stringify!(version)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).malloc) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoAllocatorVTable),
            "::",
            stringify!(malloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).realloc) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoAllocatorVTable),
            "::",
            stringify!(realloc)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).free) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoAllocatorVTable),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calloc) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoAllocatorVTable),
            "::",
            stringify!(calloc)
        )
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_allocator_vtable(vtable: *mut MonoAllocatorVTable) -> mono_bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoJitInfo {
    _unused: [u8; 0],
}
pub type MonoJitInfo = _MonoJitInfo;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionAssembly {
    _unused: [u8; 0],
}
pub type MonoReflectionAssembly = _MonoReflectionAssembly;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionTypeBuilder {
    _unused: [u8; 0],
}
pub type MonoReflectionTypeBuilder = _MonoReflectionTypeBuilder;
pub const MonoTypeEnum_MONO_TYPE_END: MonoTypeEnum = 0;
pub const MonoTypeEnum_MONO_TYPE_VOID: MonoTypeEnum = 1;
pub const MonoTypeEnum_MONO_TYPE_BOOLEAN: MonoTypeEnum = 2;
pub const MonoTypeEnum_MONO_TYPE_CHAR: MonoTypeEnum = 3;
pub const MonoTypeEnum_MONO_TYPE_I1: MonoTypeEnum = 4;
pub const MonoTypeEnum_MONO_TYPE_U1: MonoTypeEnum = 5;
pub const MonoTypeEnum_MONO_TYPE_I2: MonoTypeEnum = 6;
pub const MonoTypeEnum_MONO_TYPE_U2: MonoTypeEnum = 7;
pub const MonoTypeEnum_MONO_TYPE_I4: MonoTypeEnum = 8;
pub const MonoTypeEnum_MONO_TYPE_U4: MonoTypeEnum = 9;
pub const MonoTypeEnum_MONO_TYPE_I8: MonoTypeEnum = 10;
pub const MonoTypeEnum_MONO_TYPE_U8: MonoTypeEnum = 11;
pub const MonoTypeEnum_MONO_TYPE_R4: MonoTypeEnum = 12;
pub const MonoTypeEnum_MONO_TYPE_R8: MonoTypeEnum = 13;
pub const MonoTypeEnum_MONO_TYPE_STRING: MonoTypeEnum = 14;
pub const MonoTypeEnum_MONO_TYPE_PTR: MonoTypeEnum = 15;
pub const MonoTypeEnum_MONO_TYPE_BYREF: MonoTypeEnum = 16;
pub const MonoTypeEnum_MONO_TYPE_VALUETYPE: MonoTypeEnum = 17;
pub const MonoTypeEnum_MONO_TYPE_CLASS: MonoTypeEnum = 18;
pub const MonoTypeEnum_MONO_TYPE_VAR: MonoTypeEnum = 19;
pub const MonoTypeEnum_MONO_TYPE_ARRAY: MonoTypeEnum = 20;
pub const MonoTypeEnum_MONO_TYPE_GENERICINST: MonoTypeEnum = 21;
pub const MonoTypeEnum_MONO_TYPE_TYPEDBYREF: MonoTypeEnum = 22;
pub const MonoTypeEnum_MONO_TYPE_I: MonoTypeEnum = 24;
pub const MonoTypeEnum_MONO_TYPE_U: MonoTypeEnum = 25;
pub const MonoTypeEnum_MONO_TYPE_FNPTR: MonoTypeEnum = 27;
pub const MonoTypeEnum_MONO_TYPE_OBJECT: MonoTypeEnum = 28;
pub const MonoTypeEnum_MONO_TYPE_SZARRAY: MonoTypeEnum = 29;
pub const MonoTypeEnum_MONO_TYPE_MVAR: MonoTypeEnum = 30;
pub const MonoTypeEnum_MONO_TYPE_CMOD_REQD: MonoTypeEnum = 31;
pub const MonoTypeEnum_MONO_TYPE_CMOD_OPT: MonoTypeEnum = 32;
pub const MonoTypeEnum_MONO_TYPE_INTERNAL: MonoTypeEnum = 33;
pub const MonoTypeEnum_MONO_TYPE_MODIFIER: MonoTypeEnum = 64;
pub const MonoTypeEnum_MONO_TYPE_SENTINEL: MonoTypeEnum = 65;
pub const MonoTypeEnum_MONO_TYPE_PINNED: MonoTypeEnum = 69;
pub const MonoTypeEnum_MONO_TYPE_ENUM: MonoTypeEnum = 85;
pub type MonoTypeEnum = ::std::os::raw::c_int;
pub const MonoMetaTableEnum_MONO_TABLE_MODULE: MonoMetaTableEnum = 0;
pub const MonoMetaTableEnum_MONO_TABLE_TYPEREF: MonoMetaTableEnum = 1;
pub const MonoMetaTableEnum_MONO_TABLE_TYPEDEF: MonoMetaTableEnum = 2;
pub const MonoMetaTableEnum_MONO_TABLE_FIELD_POINTER: MonoMetaTableEnum = 3;
pub const MonoMetaTableEnum_MONO_TABLE_FIELD: MonoMetaTableEnum = 4;
pub const MonoMetaTableEnum_MONO_TABLE_METHOD_POINTER: MonoMetaTableEnum = 5;
pub const MonoMetaTableEnum_MONO_TABLE_METHOD: MonoMetaTableEnum = 6;
pub const MonoMetaTableEnum_MONO_TABLE_PARAM_POINTER: MonoMetaTableEnum = 7;
pub const MonoMetaTableEnum_MONO_TABLE_PARAM: MonoMetaTableEnum = 8;
pub const MonoMetaTableEnum_MONO_TABLE_INTERFACEIMPL: MonoMetaTableEnum = 9;
pub const MonoMetaTableEnum_MONO_TABLE_MEMBERREF: MonoMetaTableEnum = 10;
pub const MonoMetaTableEnum_MONO_TABLE_CONSTANT: MonoMetaTableEnum = 11;
pub const MonoMetaTableEnum_MONO_TABLE_CUSTOMATTRIBUTE: MonoMetaTableEnum = 12;
pub const MonoMetaTableEnum_MONO_TABLE_FIELDMARSHAL: MonoMetaTableEnum = 13;
pub const MonoMetaTableEnum_MONO_TABLE_DECLSECURITY: MonoMetaTableEnum = 14;
pub const MonoMetaTableEnum_MONO_TABLE_CLASSLAYOUT: MonoMetaTableEnum = 15;
pub const MonoMetaTableEnum_MONO_TABLE_FIELDLAYOUT: MonoMetaTableEnum = 16;
pub const MonoMetaTableEnum_MONO_TABLE_STANDALONESIG: MonoMetaTableEnum = 17;
pub const MonoMetaTableEnum_MONO_TABLE_EVENTMAP: MonoMetaTableEnum = 18;
pub const MonoMetaTableEnum_MONO_TABLE_EVENT_POINTER: MonoMetaTableEnum = 19;
pub const MonoMetaTableEnum_MONO_TABLE_EVENT: MonoMetaTableEnum = 20;
pub const MonoMetaTableEnum_MONO_TABLE_PROPERTYMAP: MonoMetaTableEnum = 21;
pub const MonoMetaTableEnum_MONO_TABLE_PROPERTY_POINTER: MonoMetaTableEnum = 22;
pub const MonoMetaTableEnum_MONO_TABLE_PROPERTY: MonoMetaTableEnum = 23;
pub const MonoMetaTableEnum_MONO_TABLE_METHODSEMANTICS: MonoMetaTableEnum = 24;
pub const MonoMetaTableEnum_MONO_TABLE_METHODIMPL: MonoMetaTableEnum = 25;
pub const MonoMetaTableEnum_MONO_TABLE_MODULEREF: MonoMetaTableEnum = 26;
pub const MonoMetaTableEnum_MONO_TABLE_TYPESPEC: MonoMetaTableEnum = 27;
pub const MonoMetaTableEnum_MONO_TABLE_IMPLMAP: MonoMetaTableEnum = 28;
pub const MonoMetaTableEnum_MONO_TABLE_FIELDRVA: MonoMetaTableEnum = 29;
pub const MonoMetaTableEnum_MONO_TABLE_UNUSED6: MonoMetaTableEnum = 30;
pub const MonoMetaTableEnum_MONO_TABLE_UNUSED7: MonoMetaTableEnum = 31;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLY: MonoMetaTableEnum = 32;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLYPROCESSOR: MonoMetaTableEnum = 33;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLYOS: MonoMetaTableEnum = 34;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLYREF: MonoMetaTableEnum = 35;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLYREFPROCESSOR: MonoMetaTableEnum = 36;
pub const MonoMetaTableEnum_MONO_TABLE_ASSEMBLYREFOS: MonoMetaTableEnum = 37;
pub const MonoMetaTableEnum_MONO_TABLE_FILE: MonoMetaTableEnum = 38;
pub const MonoMetaTableEnum_MONO_TABLE_EXPORTEDTYPE: MonoMetaTableEnum = 39;
pub const MonoMetaTableEnum_MONO_TABLE_MANIFESTRESOURCE: MonoMetaTableEnum = 40;
pub const MonoMetaTableEnum_MONO_TABLE_NESTEDCLASS: MonoMetaTableEnum = 41;
pub const MonoMetaTableEnum_MONO_TABLE_GENERICPARAM: MonoMetaTableEnum = 42;
pub const MonoMetaTableEnum_MONO_TABLE_METHODSPEC: MonoMetaTableEnum = 43;
pub const MonoMetaTableEnum_MONO_TABLE_GENERICPARAMCONSTRAINT: MonoMetaTableEnum = 44;
pub const MonoMetaTableEnum_MONO_TABLE_UNUSED8: MonoMetaTableEnum = 45;
pub const MonoMetaTableEnum_MONO_TABLE_UNUSED9: MonoMetaTableEnum = 46;
pub const MonoMetaTableEnum_MONO_TABLE_UNUSED10: MonoMetaTableEnum = 47;
pub const MonoMetaTableEnum_MONO_TABLE_DOCUMENT: MonoMetaTableEnum = 48;
pub const MonoMetaTableEnum_MONO_TABLE_METHODBODY: MonoMetaTableEnum = 49;
pub const MonoMetaTableEnum_MONO_TABLE_LOCALSCOPE: MonoMetaTableEnum = 50;
pub const MonoMetaTableEnum_MONO_TABLE_LOCALVARIABLE: MonoMetaTableEnum = 51;
pub const MonoMetaTableEnum_MONO_TABLE_LOCALCONSTANT: MonoMetaTableEnum = 52;
pub const MonoMetaTableEnum_MONO_TABLE_IMPORTSCOPE: MonoMetaTableEnum = 53;
pub const MonoMetaTableEnum_MONO_TABLE_STATEMACHINEMETHOD: MonoMetaTableEnum = 54;
pub const MonoMetaTableEnum_MONO_TABLE_CUSTOMDEBUGINFORMATION: MonoMetaTableEnum = 55;
pub type MonoMetaTableEnum = ::std::os::raw::c_int;
pub const MONO_ASSEMBLY_HASH_ALG: _bindgen_ty_1 = 0;
pub const MONO_ASSEMBLY_MAJOR_VERSION: _bindgen_ty_1 = 1;
pub const MONO_ASSEMBLY_MINOR_VERSION: _bindgen_ty_1 = 2;
pub const MONO_ASSEMBLY_BUILD_NUMBER: _bindgen_ty_1 = 3;
pub const MONO_ASSEMBLY_REV_NUMBER: _bindgen_ty_1 = 4;
pub const MONO_ASSEMBLY_FLAGS: _bindgen_ty_1 = 5;
pub const MONO_ASSEMBLY_PUBLIC_KEY: _bindgen_ty_1 = 6;
pub const MONO_ASSEMBLY_NAME: _bindgen_ty_1 = 7;
pub const MONO_ASSEMBLY_CULTURE: _bindgen_ty_1 = 8;
pub const MONO_ASSEMBLY_SIZE: _bindgen_ty_1 = 9;
pub type _bindgen_ty_1 = ::std::os::raw::c_int;
pub const MONO_ASSEMBLYOS_PLATFORM: _bindgen_ty_2 = 0;
pub const MONO_ASSEMBLYOS_MAJOR_VERSION: _bindgen_ty_2 = 1;
pub const MONO_ASSEMBLYOS_MINOR_VERSION: _bindgen_ty_2 = 2;
pub const MONO_ASSEMBLYOS_SIZE: _bindgen_ty_2 = 3;
pub type _bindgen_ty_2 = ::std::os::raw::c_int;
pub const MONO_ASSEMBLY_PROCESSOR: _bindgen_ty_3 = 0;
pub const MONO_ASSEMBLY_PROCESSOR_SIZE: _bindgen_ty_3 = 1;
pub type _bindgen_ty_3 = ::std::os::raw::c_int;
pub const MONO_ASSEMBLYREF_MAJOR_VERSION: _bindgen_ty_4 = 0;
pub const MONO_ASSEMBLYREF_MINOR_VERSION: _bindgen_ty_4 = 1;
pub const MONO_ASSEMBLYREF_BUILD_NUMBER: _bindgen_ty_4 = 2;
pub const MONO_ASSEMBLYREF_REV_NUMBER: _bindgen_ty_4 = 3;
pub const MONO_ASSEMBLYREF_FLAGS: _bindgen_ty_4 = 4;
pub const MONO_ASSEMBLYREF_PUBLIC_KEY: _bindgen_ty_4 = 5;
pub const MONO_ASSEMBLYREF_NAME: _bindgen_ty_4 = 6;
pub const MONO_ASSEMBLYREF_CULTURE: _bindgen_ty_4 = 7;
pub const MONO_ASSEMBLYREF_HASH_VALUE: _bindgen_ty_4 = 8;
pub const MONO_ASSEMBLYREF_SIZE: _bindgen_ty_4 = 9;
pub type _bindgen_ty_4 = ::std::os::raw::c_int;
pub const MONO_ASSEMBLYREFOS_PLATFORM: _bindgen_ty_5 = 0;
pub const MONO_ASSEMBLYREFOS_MAJOR_VERSION: _bindgen_ty_5 = 1;
pub const MONO_ASSEMBLYREFOS_MINOR_VERSION: _bindgen_ty_5 = 2;
pub const MONO_ASSEMBLYREFOS_ASSEMBLYREF: _bindgen_ty_5 = 3;
pub const MONO_ASSEMBLYREFOS_SIZE: _bindgen_ty_5 = 4;
pub type _bindgen_ty_5 = ::std::os::raw::c_int;
pub const MONO_ASSEMBLYREFPROC_PROCESSOR: _bindgen_ty_6 = 0;
pub const MONO_ASSEMBLYREFPROC_ASSEMBLYREF: _bindgen_ty_6 = 1;
pub const MONO_ASSEMBLYREFPROC_SIZE: _bindgen_ty_6 = 2;
pub type _bindgen_ty_6 = ::std::os::raw::c_int;
pub const MONO_CLASS_LAYOUT_PACKING_SIZE: _bindgen_ty_7 = 0;
pub const MONO_CLASS_LAYOUT_CLASS_SIZE: _bindgen_ty_7 = 1;
pub const MONO_CLASS_LAYOUT_PARENT: _bindgen_ty_7 = 2;
pub const MONO_CLASS_LAYOUT_SIZE: _bindgen_ty_7 = 3;
pub type _bindgen_ty_7 = ::std::os::raw::c_int;
pub const MONO_CONSTANT_TYPE: _bindgen_ty_8 = 0;
pub const MONO_CONSTANT_PADDING: _bindgen_ty_8 = 1;
pub const MONO_CONSTANT_PARENT: _bindgen_ty_8 = 2;
pub const MONO_CONSTANT_VALUE: _bindgen_ty_8 = 3;
pub const MONO_CONSTANT_SIZE: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = ::std::os::raw::c_int;
pub const MONO_CUSTOM_ATTR_PARENT: _bindgen_ty_9 = 0;
pub const MONO_CUSTOM_ATTR_TYPE: _bindgen_ty_9 = 1;
pub const MONO_CUSTOM_ATTR_VALUE: _bindgen_ty_9 = 2;
pub const MONO_CUSTOM_ATTR_SIZE: _bindgen_ty_9 = 3;
pub type _bindgen_ty_9 = ::std::os::raw::c_int;
pub const MONO_DECL_SECURITY_ACTION: _bindgen_ty_10 = 0;
pub const MONO_DECL_SECURITY_PARENT: _bindgen_ty_10 = 1;
pub const MONO_DECL_SECURITY_PERMISSIONSET: _bindgen_ty_10 = 2;
pub const MONO_DECL_SECURITY_SIZE: _bindgen_ty_10 = 3;
pub type _bindgen_ty_10 = ::std::os::raw::c_int;
pub const MONO_EVENT_MAP_PARENT: _bindgen_ty_11 = 0;
pub const MONO_EVENT_MAP_EVENTLIST: _bindgen_ty_11 = 1;
pub const MONO_EVENT_MAP_SIZE: _bindgen_ty_11 = 2;
pub type _bindgen_ty_11 = ::std::os::raw::c_int;
pub const MONO_EVENT_FLAGS: _bindgen_ty_12 = 0;
pub const MONO_EVENT_NAME: _bindgen_ty_12 = 1;
pub const MONO_EVENT_TYPE: _bindgen_ty_12 = 2;
pub const MONO_EVENT_SIZE: _bindgen_ty_12 = 3;
pub type _bindgen_ty_12 = ::std::os::raw::c_int;
pub const MONO_EVENT_POINTER_EVENT: _bindgen_ty_13 = 0;
pub const MONO_EVENT_POINTER_SIZE: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = ::std::os::raw::c_int;
pub const MONO_EXP_TYPE_FLAGS: _bindgen_ty_14 = 0;
pub const MONO_EXP_TYPE_TYPEDEF: _bindgen_ty_14 = 1;
pub const MONO_EXP_TYPE_NAME: _bindgen_ty_14 = 2;
pub const MONO_EXP_TYPE_NAMESPACE: _bindgen_ty_14 = 3;
pub const MONO_EXP_TYPE_IMPLEMENTATION: _bindgen_ty_14 = 4;
pub const MONO_EXP_TYPE_SIZE: _bindgen_ty_14 = 5;
pub type _bindgen_ty_14 = ::std::os::raw::c_int;
pub const MONO_FIELD_FLAGS: _bindgen_ty_15 = 0;
pub const MONO_FIELD_NAME: _bindgen_ty_15 = 1;
pub const MONO_FIELD_SIGNATURE: _bindgen_ty_15 = 2;
pub const MONO_FIELD_SIZE: _bindgen_ty_15 = 3;
pub type _bindgen_ty_15 = ::std::os::raw::c_int;
pub const MONO_FIELD_LAYOUT_OFFSET: _bindgen_ty_16 = 0;
pub const MONO_FIELD_LAYOUT_FIELD: _bindgen_ty_16 = 1;
pub const MONO_FIELD_LAYOUT_SIZE: _bindgen_ty_16 = 2;
pub type _bindgen_ty_16 = ::std::os::raw::c_int;
pub const MONO_FIELD_MARSHAL_PARENT: _bindgen_ty_17 = 0;
pub const MONO_FIELD_MARSHAL_NATIVE_TYPE: _bindgen_ty_17 = 1;
pub const MONO_FIELD_MARSHAL_SIZE: _bindgen_ty_17 = 2;
pub type _bindgen_ty_17 = ::std::os::raw::c_int;
pub const MONO_FIELD_POINTER_FIELD: _bindgen_ty_18 = 0;
pub const MONO_FIELD_POINTER_SIZE: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = ::std::os::raw::c_int;
pub const MONO_FIELD_RVA_RVA: _bindgen_ty_19 = 0;
pub const MONO_FIELD_RVA_FIELD: _bindgen_ty_19 = 1;
pub const MONO_FIELD_RVA_SIZE: _bindgen_ty_19 = 2;
pub type _bindgen_ty_19 = ::std::os::raw::c_int;
pub const MONO_FILE_FLAGS: _bindgen_ty_20 = 0;
pub const MONO_FILE_NAME: _bindgen_ty_20 = 1;
pub const MONO_FILE_HASH_VALUE: _bindgen_ty_20 = 2;
pub const MONO_FILE_SIZE: _bindgen_ty_20 = 3;
pub type _bindgen_ty_20 = ::std::os::raw::c_int;
pub const MONO_IMPLMAP_FLAGS: _bindgen_ty_21 = 0;
pub const MONO_IMPLMAP_MEMBER: _bindgen_ty_21 = 1;
pub const MONO_IMPLMAP_NAME: _bindgen_ty_21 = 2;
pub const MONO_IMPLMAP_SCOPE: _bindgen_ty_21 = 3;
pub const MONO_IMPLMAP_SIZE: _bindgen_ty_21 = 4;
pub type _bindgen_ty_21 = ::std::os::raw::c_int;
pub const MONO_INTERFACEIMPL_CLASS: _bindgen_ty_22 = 0;
pub const MONO_INTERFACEIMPL_INTERFACE: _bindgen_ty_22 = 1;
pub const MONO_INTERFACEIMPL_SIZE: _bindgen_ty_22 = 2;
pub type _bindgen_ty_22 = ::std::os::raw::c_int;
pub const MONO_MANIFEST_OFFSET: _bindgen_ty_23 = 0;
pub const MONO_MANIFEST_FLAGS: _bindgen_ty_23 = 1;
pub const MONO_MANIFEST_NAME: _bindgen_ty_23 = 2;
pub const MONO_MANIFEST_IMPLEMENTATION: _bindgen_ty_23 = 3;
pub const MONO_MANIFEST_SIZE: _bindgen_ty_23 = 4;
pub type _bindgen_ty_23 = ::std::os::raw::c_int;
pub const MONO_MEMBERREF_CLASS: _bindgen_ty_24 = 0;
pub const MONO_MEMBERREF_NAME: _bindgen_ty_24 = 1;
pub const MONO_MEMBERREF_SIGNATURE: _bindgen_ty_24 = 2;
pub const MONO_MEMBERREF_SIZE: _bindgen_ty_24 = 3;
pub type _bindgen_ty_24 = ::std::os::raw::c_int;
pub const MONO_METHOD_RVA: _bindgen_ty_25 = 0;
pub const MONO_METHOD_IMPLFLAGS: _bindgen_ty_25 = 1;
pub const MONO_METHOD_FLAGS: _bindgen_ty_25 = 2;
pub const MONO_METHOD_NAME: _bindgen_ty_25 = 3;
pub const MONO_METHOD_SIGNATURE: _bindgen_ty_25 = 4;
pub const MONO_METHOD_PARAMLIST: _bindgen_ty_25 = 5;
pub const MONO_METHOD_SIZE: _bindgen_ty_25 = 6;
pub type _bindgen_ty_25 = ::std::os::raw::c_int;
pub const MONO_METHODIMPL_CLASS: _bindgen_ty_26 = 0;
pub const MONO_METHODIMPL_BODY: _bindgen_ty_26 = 1;
pub const MONO_METHODIMPL_DECLARATION: _bindgen_ty_26 = 2;
pub const MONO_METHODIMPL_SIZE: _bindgen_ty_26 = 3;
pub type _bindgen_ty_26 = ::std::os::raw::c_int;
pub const MONO_METHOD_POINTER_METHOD: _bindgen_ty_27 = 0;
pub const MONO_METHOD_POINTER_SIZE: _bindgen_ty_27 = 1;
pub type _bindgen_ty_27 = ::std::os::raw::c_int;
pub const MONO_METHOD_SEMA_SEMANTICS: _bindgen_ty_28 = 0;
pub const MONO_METHOD_SEMA_METHOD: _bindgen_ty_28 = 1;
pub const MONO_METHOD_SEMA_ASSOCIATION: _bindgen_ty_28 = 2;
pub const MONO_METHOD_SEMA_SIZE: _bindgen_ty_28 = 3;
pub type _bindgen_ty_28 = ::std::os::raw::c_int;
pub const MONO_MODULE_GENERATION: _bindgen_ty_29 = 0;
pub const MONO_MODULE_NAME: _bindgen_ty_29 = 1;
pub const MONO_MODULE_MVID: _bindgen_ty_29 = 2;
pub const MONO_MODULE_ENC: _bindgen_ty_29 = 3;
pub const MONO_MODULE_ENCBASE: _bindgen_ty_29 = 4;
pub const MONO_MODULE_SIZE: _bindgen_ty_29 = 5;
pub type _bindgen_ty_29 = ::std::os::raw::c_int;
pub const MONO_MODULEREF_NAME: _bindgen_ty_30 = 0;
pub const MONO_MODULEREF_SIZE: _bindgen_ty_30 = 1;
pub type _bindgen_ty_30 = ::std::os::raw::c_int;
pub const MONO_NESTED_CLASS_NESTED: _bindgen_ty_31 = 0;
pub const MONO_NESTED_CLASS_ENCLOSING: _bindgen_ty_31 = 1;
pub const MONO_NESTED_CLASS_SIZE: _bindgen_ty_31 = 2;
pub type _bindgen_ty_31 = ::std::os::raw::c_int;
pub const MONO_PARAM_FLAGS: _bindgen_ty_32 = 0;
pub const MONO_PARAM_SEQUENCE: _bindgen_ty_32 = 1;
pub const MONO_PARAM_NAME: _bindgen_ty_32 = 2;
pub const MONO_PARAM_SIZE: _bindgen_ty_32 = 3;
pub type _bindgen_ty_32 = ::std::os::raw::c_int;
pub const MONO_PARAM_POINTER_PARAM: _bindgen_ty_33 = 0;
pub const MONO_PARAM_POINTER_SIZE: _bindgen_ty_33 = 1;
pub type _bindgen_ty_33 = ::std::os::raw::c_int;
pub const MONO_PROPERTY_FLAGS: _bindgen_ty_34 = 0;
pub const MONO_PROPERTY_NAME: _bindgen_ty_34 = 1;
pub const MONO_PROPERTY_TYPE: _bindgen_ty_34 = 2;
pub const MONO_PROPERTY_SIZE: _bindgen_ty_34 = 3;
pub type _bindgen_ty_34 = ::std::os::raw::c_int;
pub const MONO_PROPERTY_POINTER_PROPERTY: _bindgen_ty_35 = 0;
pub const MONO_PROPERTY_POINTER_SIZE: _bindgen_ty_35 = 1;
pub type _bindgen_ty_35 = ::std::os::raw::c_int;
pub const MONO_PROPERTY_MAP_PARENT: _bindgen_ty_36 = 0;
pub const MONO_PROPERTY_MAP_PROPERTY_LIST: _bindgen_ty_36 = 1;
pub const MONO_PROPERTY_MAP_SIZE: _bindgen_ty_36 = 2;
pub type _bindgen_ty_36 = ::std::os::raw::c_int;
pub const MONO_STAND_ALONE_SIGNATURE: _bindgen_ty_37 = 0;
pub const MONO_STAND_ALONE_SIGNATURE_SIZE: _bindgen_ty_37 = 1;
pub type _bindgen_ty_37 = ::std::os::raw::c_int;
pub const MONO_TYPEDEF_FLAGS: _bindgen_ty_38 = 0;
pub const MONO_TYPEDEF_NAME: _bindgen_ty_38 = 1;
pub const MONO_TYPEDEF_NAMESPACE: _bindgen_ty_38 = 2;
pub const MONO_TYPEDEF_EXTENDS: _bindgen_ty_38 = 3;
pub const MONO_TYPEDEF_FIELD_LIST: _bindgen_ty_38 = 4;
pub const MONO_TYPEDEF_METHOD_LIST: _bindgen_ty_38 = 5;
pub const MONO_TYPEDEF_SIZE: _bindgen_ty_38 = 6;
pub type _bindgen_ty_38 = ::std::os::raw::c_int;
pub const MONO_TYPEREF_SCOPE: _bindgen_ty_39 = 0;
pub const MONO_TYPEREF_NAME: _bindgen_ty_39 = 1;
pub const MONO_TYPEREF_NAMESPACE: _bindgen_ty_39 = 2;
pub const MONO_TYPEREF_SIZE: _bindgen_ty_39 = 3;
pub type _bindgen_ty_39 = ::std::os::raw::c_int;
pub const MONO_TYPESPEC_SIGNATURE: _bindgen_ty_40 = 0;
pub const MONO_TYPESPEC_SIZE: _bindgen_ty_40 = 1;
pub type _bindgen_ty_40 = ::std::os::raw::c_int;
pub const MONO_GENERICPARAM_NUMBER: _bindgen_ty_41 = 0;
pub const MONO_GENERICPARAM_FLAGS: _bindgen_ty_41 = 1;
pub const MONO_GENERICPARAM_OWNER: _bindgen_ty_41 = 2;
pub const MONO_GENERICPARAM_NAME: _bindgen_ty_41 = 3;
pub const MONO_GENERICPARAM_SIZE: _bindgen_ty_41 = 4;
pub type _bindgen_ty_41 = ::std::os::raw::c_int;
pub const MONO_METHODSPEC_METHOD: _bindgen_ty_42 = 0;
pub const MONO_METHODSPEC_SIGNATURE: _bindgen_ty_42 = 1;
pub const MONO_METHODSPEC_SIZE: _bindgen_ty_42 = 2;
pub type _bindgen_ty_42 = ::std::os::raw::c_int;
pub const MONO_GENPARCONSTRAINT_GENERICPAR: _bindgen_ty_43 = 0;
pub const MONO_GENPARCONSTRAINT_CONSTRAINT: _bindgen_ty_43 = 1;
pub const MONO_GENPARCONSTRAINT_SIZE: _bindgen_ty_43 = 2;
pub type _bindgen_ty_43 = ::std::os::raw::c_int;
pub const MONO_DOCUMENT_NAME: _bindgen_ty_44 = 0;
pub const MONO_DOCUMENT_HASHALG: _bindgen_ty_44 = 1;
pub const MONO_DOCUMENT_HASH: _bindgen_ty_44 = 2;
pub const MONO_DOCUMENT_LANGUAGE: _bindgen_ty_44 = 3;
pub const MONO_DOCUMENT_SIZE: _bindgen_ty_44 = 4;
pub type _bindgen_ty_44 = ::std::os::raw::c_int;
pub const MONO_METHODBODY_DOCUMENT: _bindgen_ty_45 = 0;
pub const MONO_METHODBODY_SEQ_POINTS: _bindgen_ty_45 = 1;
pub const MONO_METHODBODY_SIZE: _bindgen_ty_45 = 2;
pub type _bindgen_ty_45 = ::std::os::raw::c_int;
pub const MONO_LOCALSCOPE_METHOD: _bindgen_ty_46 = 0;
pub const MONO_LOCALSCOPE_IMPORTSCOPE: _bindgen_ty_46 = 1;
pub const MONO_LOCALSCOPE_VARIABLELIST: _bindgen_ty_46 = 2;
pub const MONO_LOCALSCOPE_CONSTANTLIST: _bindgen_ty_46 = 3;
pub const MONO_LOCALSCOPE_STARTOFFSET: _bindgen_ty_46 = 4;
pub const MONO_LOCALSCOPE_LENGTH: _bindgen_ty_46 = 5;
pub const MONO_LOCALSCOPE_SIZE: _bindgen_ty_46 = 6;
pub type _bindgen_ty_46 = ::std::os::raw::c_int;
pub const MONO_LOCALVARIABLE_ATTRIBUTES: _bindgen_ty_47 = 0;
pub const MONO_LOCALVARIABLE_INDEX: _bindgen_ty_47 = 1;
pub const MONO_LOCALVARIABLE_NAME: _bindgen_ty_47 = 2;
pub const MONO_LOCALVARIABLE_SIZE: _bindgen_ty_47 = 3;
pub type _bindgen_ty_47 = ::std::os::raw::c_int;
pub const MONO_CUSTOMDEBUGINFORMATION_PARENT: _bindgen_ty_48 = 0;
pub const MONO_CUSTOMDEBUGINFORMATION_KIND: _bindgen_ty_48 = 1;
pub const MONO_CUSTOMDEBUGINFORMATION_VALUE: _bindgen_ty_48 = 2;
pub const MONO_CUSTOMDEBUGINFORMATION_SIZE: _bindgen_ty_48 = 3;
pub type _bindgen_ty_48 = ::std::os::raw::c_int;
pub const MONO_TYPEDEFORREF_TYPEDEF: _bindgen_ty_49 = 0;
pub const MONO_TYPEDEFORREF_TYPEREF: _bindgen_ty_49 = 1;
pub const MONO_TYPEDEFORREF_TYPESPEC: _bindgen_ty_49 = 2;
pub const MONO_TYPEDEFORREF_BITS: _bindgen_ty_49 = 2;
pub const MONO_TYPEDEFORREF_MASK: _bindgen_ty_49 = 3;
pub type _bindgen_ty_49 = ::std::os::raw::c_int;
pub const MONO_HASCONSTANT_FIEDDEF: _bindgen_ty_50 = 0;
pub const MONO_HASCONSTANT_PARAM: _bindgen_ty_50 = 1;
pub const MONO_HASCONSTANT_PROPERTY: _bindgen_ty_50 = 2;
pub const MONO_HASCONSTANT_BITS: _bindgen_ty_50 = 2;
pub const MONO_HASCONSTANT_MASK: _bindgen_ty_50 = 3;
pub type _bindgen_ty_50 = ::std::os::raw::c_int;
pub const MONO_CUSTOM_ATTR_METHODDEF: _bindgen_ty_51 = 0;
pub const MONO_CUSTOM_ATTR_FIELDDEF: _bindgen_ty_51 = 1;
pub const MONO_CUSTOM_ATTR_TYPEREF: _bindgen_ty_51 = 2;
pub const MONO_CUSTOM_ATTR_TYPEDEF: _bindgen_ty_51 = 3;
pub const MONO_CUSTOM_ATTR_PARAMDEF: _bindgen_ty_51 = 4;
pub const MONO_CUSTOM_ATTR_INTERFACE: _bindgen_ty_51 = 5;
pub const MONO_CUSTOM_ATTR_MEMBERREF: _bindgen_ty_51 = 6;
pub const MONO_CUSTOM_ATTR_MODULE: _bindgen_ty_51 = 7;
pub const MONO_CUSTOM_ATTR_PERMISSION: _bindgen_ty_51 = 8;
pub const MONO_CUSTOM_ATTR_PROPERTY: _bindgen_ty_51 = 9;
pub const MONO_CUSTOM_ATTR_EVENT: _bindgen_ty_51 = 10;
pub const MONO_CUSTOM_ATTR_SIGNATURE: _bindgen_ty_51 = 11;
pub const MONO_CUSTOM_ATTR_MODULEREF: _bindgen_ty_51 = 12;
pub const MONO_CUSTOM_ATTR_TYPESPEC: _bindgen_ty_51 = 13;
pub const MONO_CUSTOM_ATTR_ASSEMBLY: _bindgen_ty_51 = 14;
pub const MONO_CUSTOM_ATTR_ASSEMBLYREF: _bindgen_ty_51 = 15;
pub const MONO_CUSTOM_ATTR_FILE: _bindgen_ty_51 = 16;
pub const MONO_CUSTOM_ATTR_EXP_TYPE: _bindgen_ty_51 = 17;
pub const MONO_CUSTOM_ATTR_MANIFEST: _bindgen_ty_51 = 18;
pub const MONO_CUSTOM_ATTR_GENERICPAR: _bindgen_ty_51 = 19;
pub const MONO_CUSTOM_ATTR_GENERICPARAMCONSTRAINT: _bindgen_ty_51 = 20;
pub const MONO_CUSTOM_ATTR_BITS: _bindgen_ty_51 = 5;
pub const MONO_CUSTOM_ATTR_MASK: _bindgen_ty_51 = 31;
pub type _bindgen_ty_51 = ::std::os::raw::c_int;
pub const MONO_HAS_FIELD_MARSHAL_FIELDSREF: _bindgen_ty_52 = 0;
pub const MONO_HAS_FIELD_MARSHAL_PARAMDEF: _bindgen_ty_52 = 1;
pub const MONO_HAS_FIELD_MARSHAL_BITS: _bindgen_ty_52 = 1;
pub const MONO_HAS_FIELD_MARSHAL_MASK: _bindgen_ty_52 = 1;
pub type _bindgen_ty_52 = ::std::os::raw::c_int;
pub const MONO_HAS_DECL_SECURITY_TYPEDEF: _bindgen_ty_53 = 0;
pub const MONO_HAS_DECL_SECURITY_METHODDEF: _bindgen_ty_53 = 1;
pub const MONO_HAS_DECL_SECURITY_ASSEMBLY: _bindgen_ty_53 = 2;
pub const MONO_HAS_DECL_SECURITY_BITS: _bindgen_ty_53 = 2;
pub const MONO_HAS_DECL_SECURITY_MASK: _bindgen_ty_53 = 3;
pub type _bindgen_ty_53 = ::std::os::raw::c_int;
pub const MONO_MEMBERREF_PARENT_TYPEDEF: _bindgen_ty_54 = 0;
pub const MONO_MEMBERREF_PARENT_TYPEREF: _bindgen_ty_54 = 1;
pub const MONO_MEMBERREF_PARENT_MODULEREF: _bindgen_ty_54 = 2;
pub const MONO_MEMBERREF_PARENT_METHODDEF: _bindgen_ty_54 = 3;
pub const MONO_MEMBERREF_PARENT_TYPESPEC: _bindgen_ty_54 = 4;
pub const MONO_MEMBERREF_PARENT_BITS: _bindgen_ty_54 = 3;
pub const MONO_MEMBERREF_PARENT_MASK: _bindgen_ty_54 = 7;
pub type _bindgen_ty_54 = ::std::os::raw::c_int;
pub const MONO_HAS_SEMANTICS_EVENT: _bindgen_ty_55 = 0;
pub const MONO_HAS_SEMANTICS_PROPERTY: _bindgen_ty_55 = 1;
pub const MONO_HAS_SEMANTICS_BITS: _bindgen_ty_55 = 1;
pub const MONO_HAS_SEMANTICS_MASK: _bindgen_ty_55 = 1;
pub type _bindgen_ty_55 = ::std::os::raw::c_int;
pub const MONO_METHODDEFORREF_METHODDEF: _bindgen_ty_56 = 0;
pub const MONO_METHODDEFORREF_METHODREF: _bindgen_ty_56 = 1;
pub const MONO_METHODDEFORREF_BITS: _bindgen_ty_56 = 1;
pub const MONO_METHODDEFORREF_MASK: _bindgen_ty_56 = 1;
pub type _bindgen_ty_56 = ::std::os::raw::c_int;
pub const MONO_MEMBERFORWD_FIELDDEF: _bindgen_ty_57 = 0;
pub const MONO_MEMBERFORWD_METHODDEF: _bindgen_ty_57 = 1;
pub const MONO_MEMBERFORWD_BITS: _bindgen_ty_57 = 1;
pub const MONO_MEMBERFORWD_MASK: _bindgen_ty_57 = 1;
pub type _bindgen_ty_57 = ::std::os::raw::c_int;
pub const MONO_IMPLEMENTATION_FILE: _bindgen_ty_58 = 0;
pub const MONO_IMPLEMENTATION_ASSEMBLYREF: _bindgen_ty_58 = 1;
pub const MONO_IMPLEMENTATION_EXP_TYPE: _bindgen_ty_58 = 2;
pub const MONO_IMPLEMENTATION_BITS: _bindgen_ty_58 = 2;
pub const MONO_IMPLEMENTATION_MASK: _bindgen_ty_58 = 3;
pub type _bindgen_ty_58 = ::std::os::raw::c_int;
pub const MONO_CUSTOM_ATTR_TYPE_TYPEREF: _bindgen_ty_59 = 0;
pub const MONO_CUSTOM_ATTR_TYPE_TYPEDEF: _bindgen_ty_59 = 1;
pub const MONO_CUSTOM_ATTR_TYPE_METHODDEF: _bindgen_ty_59 = 2;
pub const MONO_CUSTOM_ATTR_TYPE_MEMBERREF: _bindgen_ty_59 = 3;
pub const MONO_CUSTOM_ATTR_TYPE_STRING: _bindgen_ty_59 = 4;
pub const MONO_CUSTOM_ATTR_TYPE_BITS: _bindgen_ty_59 = 3;
pub const MONO_CUSTOM_ATTR_TYPE_MASK: _bindgen_ty_59 = 7;
pub type _bindgen_ty_59 = ::std::os::raw::c_int;
pub const MONO_RESOLUTION_SCOPE_MODULE: _bindgen_ty_60 = 0;
pub const MONO_RESOLUTION_SCOPE_MODULEREF: _bindgen_ty_60 = 1;
pub const MONO_RESOLUTION_SCOPE_ASSEMBLYREF: _bindgen_ty_60 = 2;
pub const MONO_RESOLUTION_SCOPE_TYPEREF: _bindgen_ty_60 = 3;
pub const MONO_RESOLUTION_SCOPE_BITS: _bindgen_ty_60 = 2;
pub const MONO_RESOLUTION_SCOPE_MASK: _bindgen_ty_60 = 3;
pub type _bindgen_ty_60 = ::std::os::raw::c_int;
pub const MONO_RESOLTION_SCOPE_MODULE: _bindgen_ty_61 = 0;
pub const MONO_RESOLTION_SCOPE_MODULEREF: _bindgen_ty_61 = 1;
pub const MONO_RESOLTION_SCOPE_ASSEMBLYREF: _bindgen_ty_61 = 2;
pub const MONO_RESOLTION_SCOPE_TYPEREF: _bindgen_ty_61 = 3;
pub const MONO_RESOLTION_SCOPE_BITS: _bindgen_ty_61 = 2;
pub const MONO_RESOLTION_SCOPE_MASK: _bindgen_ty_61 = 3;
pub type _bindgen_ty_61 = ::std::os::raw::c_int;
pub const MONO_TYPEORMETHOD_TYPE: _bindgen_ty_62 = 0;
pub const MONO_TYPEORMETHOD_METHOD: _bindgen_ty_62 = 1;
pub const MONO_TYPEORMETHOD_BITS: _bindgen_ty_62 = 1;
pub const MONO_TYPEORMETHOD_MASK: _bindgen_ty_62 = 1;
pub type _bindgen_ty_62 = ::std::os::raw::c_int;
pub const MONO_ERROR_FREE_STRINGS: _bindgen_ty_63 = 1;
pub const MONO_ERROR_INCOMPLETE: _bindgen_ty_63 = 2;
pub const MONO_ERROR_MEMPOOL_BOXED: _bindgen_ty_63 = 4;
pub type _bindgen_ty_63 = ::std::os::raw::c_int;
pub const MONO_ERROR_NONE: _bindgen_ty_64 = 0;
pub const MONO_ERROR_MISSING_METHOD: _bindgen_ty_64 = 1;
pub const MONO_ERROR_MISSING_FIELD: _bindgen_ty_64 = 2;
pub const MONO_ERROR_TYPE_LOAD: _bindgen_ty_64 = 3;
pub const MONO_ERROR_FILE_NOT_FOUND: _bindgen_ty_64 = 4;
pub const MONO_ERROR_BAD_IMAGE: _bindgen_ty_64 = 5;
pub const MONO_ERROR_OUT_OF_MEMORY: _bindgen_ty_64 = 6;
pub const MONO_ERROR_ARGUMENT: _bindgen_ty_64 = 7;
pub const MONO_ERROR_ARGUMENT_NULL: _bindgen_ty_64 = 11;
pub const MONO_ERROR_ARGUMENT_OUT_OF_RANGE: _bindgen_ty_64 = 14;
pub const MONO_ERROR_NOT_VERIFIABLE: _bindgen_ty_64 = 8;
pub const MONO_ERROR_INVALID_PROGRAM: _bindgen_ty_64 = 12;
pub const MONO_ERROR_MEMBER_ACCESS: _bindgen_ty_64 = 13;
pub const MONO_ERROR_GENERIC: _bindgen_ty_64 = 9;
pub const MONO_ERROR_EXCEPTION_INSTANCE: _bindgen_ty_64 = 10;
pub const MONO_ERROR_CLEANUP_CALLED_SENTINEL: _bindgen_ty_64 = 65535;
pub type _bindgen_ty_64 = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union _MonoError {
    pub init: u32,
    pub __bindgen_anon_1: _MonoError__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoError__bindgen_ty_1 {
    pub error_code: u16,
    pub private_flags: u16,
    pub hidden_1: [*mut ::std::os::raw::c_void; 12usize],
}
pub type MonoErrorExternal = _MonoError;
pub type MonoError = MonoErrorExternal;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoErrorBoxed {
    _unused: [u8; 0],
}
pub type MonoErrorBoxed = _MonoErrorBoxed;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_init(error: *mut MonoError);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_init_flags(error: *mut MonoError, flags: ::std::os::raw::c_ushort);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_cleanup(error: *mut MonoError);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_ok(error: *mut MonoError) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_get_error_code(error: *mut MonoError) -> ::std::os::raw::c_ushort;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_error_get_message(error: *mut MonoError) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoTableInfo {
    _unused: [u8; 0],
}
pub type MonoTableInfo = _MonoTableInfo;
pub const MonoImageOpenStatus_MONO_IMAGE_OK: MonoImageOpenStatus = 0;
pub const MonoImageOpenStatus_MONO_IMAGE_ERROR_ERRNO: MonoImageOpenStatus = 1;
pub const MonoImageOpenStatus_MONO_IMAGE_MISSING_ASSEMBLYREF: MonoImageOpenStatus = 2;
pub const MonoImageOpenStatus_MONO_IMAGE_IMAGE_INVALID: MonoImageOpenStatus = 3;
pub type MonoImageOpenStatus = ::std::os::raw::c_int;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_images_init();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_images_cleanup();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_open(
        fname: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_open_full(
        fname: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_pe_file_open(
        fname: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_open_from_data(
        data: *mut ::std::os::raw::c_char,
        data_len: u32,
        need_copy: mono_bool,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_open_from_data_full(
        data: *mut ::std::os::raw::c_char,
        data_len: u32,
        need_copy: mono_bool,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_open_from_data_with_name(
        data: *mut ::std::os::raw::c_char,
        data_len: u32,
        need_copy: mono_bool,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_fixup_vtable(image: *mut MonoImage);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_loaded(name: *const ::std::os::raw::c_char) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_loaded_full(
        name: *const ::std::os::raw::c_char,
        refonly: mono_bool,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_loaded_by_guid(guid: *const ::std::os::raw::c_char) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_loaded_by_guid_full(
        guid: *const ::std::os::raw::c_char,
        refonly: mono_bool,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_init(image: *mut MonoImage);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_close(image: *mut MonoImage);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_addref(image: *mut MonoImage);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_strerror(status: MonoImageOpenStatus) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_ensure_section(
        image: *mut MonoImage,
        section: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_ensure_section_idx(
        image: *mut MonoImage,
        section: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_entry_point(image: *mut MonoImage) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_resource(
        image: *mut MonoImage,
        offset: u32,
        size: *mut u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_load_file_for_image(
        image: *mut MonoImage,
        fileidx: ::std::os::raw::c_int,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_load_module(
        image: *mut MonoImage,
        idx: ::std::os::raw::c_int,
    ) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_name(image: *mut MonoImage) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_filename(image: *mut MonoImage) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_guid(image: *mut MonoImage) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_assembly(image: *mut MonoImage) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_is_dynamic(image: *mut MonoImage) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_rva_map(image: *mut MonoImage, rva: u32) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_table_info(
        image: *mut MonoImage,
        table_id: ::std::os::raw::c_int,
    ) -> *const MonoTableInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_table_rows(
        image: *mut MonoImage,
        table_id: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_table_info_get_rows(table: *const MonoTableInfo) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_lookup_resource(
        image: *mut MonoImage,
        res_id: u32,
        lang_id: u32,
        name: *mut mono_unichar2,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_public_key(
        image: *mut MonoImage,
        size: *mut u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_get_strong_name(
        image: *mut MonoImage,
        size: *mut u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_strong_name_position(image: *mut MonoImage, size: *mut u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_add_to_name_cache(
        image: *mut MonoImage,
        nspace: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        idx: u32,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_image_has_authenticode_entry(image: *mut MonoImage) -> mono_bool;
}
pub const MonoExceptionEnum_MONO_EXCEPTION_CLAUSE_NONE: MonoExceptionEnum = 0;
pub const MonoExceptionEnum_MONO_EXCEPTION_CLAUSE_FILTER: MonoExceptionEnum = 1;
pub const MonoExceptionEnum_MONO_EXCEPTION_CLAUSE_FINALLY: MonoExceptionEnum = 2;
pub const MonoExceptionEnum_MONO_EXCEPTION_CLAUSE_FAULT: MonoExceptionEnum = 4;
pub type MonoExceptionEnum = ::std::os::raw::c_int;
pub const MonoCallConvention_MONO_CALL_DEFAULT: MonoCallConvention = 0;
pub const MonoCallConvention_MONO_CALL_C: MonoCallConvention = 1;
pub const MonoCallConvention_MONO_CALL_STDCALL: MonoCallConvention = 2;
pub const MonoCallConvention_MONO_CALL_THISCALL: MonoCallConvention = 3;
pub const MonoCallConvention_MONO_CALL_FASTCALL: MonoCallConvention = 4;
pub const MonoCallConvention_MONO_CALL_VARARG: MonoCallConvention = 5;
pub type MonoCallConvention = ::std::os::raw::c_int;
pub const MonoMarshalNative_MONO_NATIVE_BOOLEAN: MonoMarshalNative = 2;
pub const MonoMarshalNative_MONO_NATIVE_I1: MonoMarshalNative = 3;
pub const MonoMarshalNative_MONO_NATIVE_U1: MonoMarshalNative = 4;
pub const MonoMarshalNative_MONO_NATIVE_I2: MonoMarshalNative = 5;
pub const MonoMarshalNative_MONO_NATIVE_U2: MonoMarshalNative = 6;
pub const MonoMarshalNative_MONO_NATIVE_I4: MonoMarshalNative = 7;
pub const MonoMarshalNative_MONO_NATIVE_U4: MonoMarshalNative = 8;
pub const MonoMarshalNative_MONO_NATIVE_I8: MonoMarshalNative = 9;
pub const MonoMarshalNative_MONO_NATIVE_U8: MonoMarshalNative = 10;
pub const MonoMarshalNative_MONO_NATIVE_R4: MonoMarshalNative = 11;
pub const MonoMarshalNative_MONO_NATIVE_R8: MonoMarshalNative = 12;
pub const MonoMarshalNative_MONO_NATIVE_CURRENCY: MonoMarshalNative = 15;
pub const MonoMarshalNative_MONO_NATIVE_BSTR: MonoMarshalNative = 19;
pub const MonoMarshalNative_MONO_NATIVE_LPSTR: MonoMarshalNative = 20;
pub const MonoMarshalNative_MONO_NATIVE_LPWSTR: MonoMarshalNative = 21;
pub const MonoMarshalNative_MONO_NATIVE_LPTSTR: MonoMarshalNative = 22;
pub const MonoMarshalNative_MONO_NATIVE_BYVALTSTR: MonoMarshalNative = 23;
pub const MonoMarshalNative_MONO_NATIVE_IUNKNOWN: MonoMarshalNative = 25;
pub const MonoMarshalNative_MONO_NATIVE_IDISPATCH: MonoMarshalNative = 26;
pub const MonoMarshalNative_MONO_NATIVE_STRUCT: MonoMarshalNative = 27;
pub const MonoMarshalNative_MONO_NATIVE_INTERFACE: MonoMarshalNative = 28;
pub const MonoMarshalNative_MONO_NATIVE_SAFEARRAY: MonoMarshalNative = 29;
pub const MonoMarshalNative_MONO_NATIVE_BYVALARRAY: MonoMarshalNative = 30;
pub const MonoMarshalNative_MONO_NATIVE_INT: MonoMarshalNative = 31;
pub const MonoMarshalNative_MONO_NATIVE_UINT: MonoMarshalNative = 32;
pub const MonoMarshalNative_MONO_NATIVE_VBBYREFSTR: MonoMarshalNative = 34;
pub const MonoMarshalNative_MONO_NATIVE_ANSIBSTR: MonoMarshalNative = 35;
pub const MonoMarshalNative_MONO_NATIVE_TBSTR: MonoMarshalNative = 36;
pub const MonoMarshalNative_MONO_NATIVE_VARIANTBOOL: MonoMarshalNative = 37;
pub const MonoMarshalNative_MONO_NATIVE_FUNC: MonoMarshalNative = 38;
pub const MonoMarshalNative_MONO_NATIVE_ASANY: MonoMarshalNative = 40;
pub const MonoMarshalNative_MONO_NATIVE_LPARRAY: MonoMarshalNative = 42;
pub const MonoMarshalNative_MONO_NATIVE_LPSTRUCT: MonoMarshalNative = 43;
pub const MonoMarshalNative_MONO_NATIVE_CUSTOM: MonoMarshalNative = 44;
pub const MonoMarshalNative_MONO_NATIVE_ERROR: MonoMarshalNative = 45;
pub const MonoMarshalNative_MONO_NATIVE_UTF8STR: MonoMarshalNative = 48;
pub const MonoMarshalNative_MONO_NATIVE_MAX: MonoMarshalNative = 80;
pub type MonoMarshalNative = ::std::os::raw::c_int;
pub const MonoMarshalVariant_MONO_VARIANT_EMPTY: MonoMarshalVariant = 0;
pub const MonoMarshalVariant_MONO_VARIANT_NULL: MonoMarshalVariant = 1;
pub const MonoMarshalVariant_MONO_VARIANT_I2: MonoMarshalVariant = 2;
pub const MonoMarshalVariant_MONO_VARIANT_I4: MonoMarshalVariant = 3;
pub const MonoMarshalVariant_MONO_VARIANT_R4: MonoMarshalVariant = 4;
pub const MonoMarshalVariant_MONO_VARIANT_R8: MonoMarshalVariant = 5;
pub const MonoMarshalVariant_MONO_VARIANT_CY: MonoMarshalVariant = 6;
pub const MonoMarshalVariant_MONO_VARIANT_DATE: MonoMarshalVariant = 7;
pub const MonoMarshalVariant_MONO_VARIANT_BSTR: MonoMarshalVariant = 8;
pub const MonoMarshalVariant_MONO_VARIANT_DISPATCH: MonoMarshalVariant = 9;
pub const MonoMarshalVariant_MONO_VARIANT_ERROR: MonoMarshalVariant = 10;
pub const MonoMarshalVariant_MONO_VARIANT_BOOL: MonoMarshalVariant = 11;
pub const MonoMarshalVariant_MONO_VARIANT_VARIANT: MonoMarshalVariant = 12;
pub const MonoMarshalVariant_MONO_VARIANT_UNKNOWN: MonoMarshalVariant = 13;
pub const MonoMarshalVariant_MONO_VARIANT_DECIMAL: MonoMarshalVariant = 14;
pub const MonoMarshalVariant_MONO_VARIANT_I1: MonoMarshalVariant = 16;
pub const MonoMarshalVariant_MONO_VARIANT_UI1: MonoMarshalVariant = 17;
pub const MonoMarshalVariant_MONO_VARIANT_UI2: MonoMarshalVariant = 18;
pub const MonoMarshalVariant_MONO_VARIANT_UI4: MonoMarshalVariant = 19;
pub const MonoMarshalVariant_MONO_VARIANT_I8: MonoMarshalVariant = 20;
pub const MonoMarshalVariant_MONO_VARIANT_UI8: MonoMarshalVariant = 21;
pub const MonoMarshalVariant_MONO_VARIANT_INT: MonoMarshalVariant = 22;
pub const MonoMarshalVariant_MONO_VARIANT_UINT: MonoMarshalVariant = 23;
pub const MonoMarshalVariant_MONO_VARIANT_VOID: MonoMarshalVariant = 24;
pub const MonoMarshalVariant_MONO_VARIANT_HRESULT: MonoMarshalVariant = 25;
pub const MonoMarshalVariant_MONO_VARIANT_PTR: MonoMarshalVariant = 26;
pub const MonoMarshalVariant_MONO_VARIANT_SAFEARRAY: MonoMarshalVariant = 27;
pub const MonoMarshalVariant_MONO_VARIANT_CARRAY: MonoMarshalVariant = 28;
pub const MonoMarshalVariant_MONO_VARIANT_USERDEFINED: MonoMarshalVariant = 29;
pub const MonoMarshalVariant_MONO_VARIANT_LPSTR: MonoMarshalVariant = 30;
pub const MonoMarshalVariant_MONO_VARIANT_LPWSTR: MonoMarshalVariant = 31;
pub const MonoMarshalVariant_MONO_VARIANT_RECORD: MonoMarshalVariant = 36;
pub const MonoMarshalVariant_MONO_VARIANT_FILETIME: MonoMarshalVariant = 64;
pub const MonoMarshalVariant_MONO_VARIANT_BLOB: MonoMarshalVariant = 65;
pub const MonoMarshalVariant_MONO_VARIANT_STREAM: MonoMarshalVariant = 66;
pub const MonoMarshalVariant_MONO_VARIANT_STORAGE: MonoMarshalVariant = 67;
pub const MonoMarshalVariant_MONO_VARIANT_STREAMED_OBJECT: MonoMarshalVariant = 68;
pub const MonoMarshalVariant_MONO_VARIANT_STORED_OBJECT: MonoMarshalVariant = 69;
pub const MonoMarshalVariant_MONO_VARIANT_BLOB_OBJECT: MonoMarshalVariant = 70;
pub const MonoMarshalVariant_MONO_VARIANT_CF: MonoMarshalVariant = 71;
pub const MonoMarshalVariant_MONO_VARIANT_CLSID: MonoMarshalVariant = 72;
pub const MonoMarshalVariant_MONO_VARIANT_VECTOR: MonoMarshalVariant = 4096;
pub const MonoMarshalVariant_MONO_VARIANT_ARRAY: MonoMarshalVariant = 8192;
pub const MonoMarshalVariant_MONO_VARIANT_BYREF: MonoMarshalVariant = 16384;
pub type MonoMarshalVariant = ::std::os::raw::c_int;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_NONE: MonoMarshalConv = 0;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_BOOL_VARIANTBOOL: MonoMarshalConv = 1;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_BOOL_I4: MonoMarshalConv = 2;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_BSTR: MonoMarshalConv = 3;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_LPSTR: MonoMarshalConv = 4;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPSTR_STR: MonoMarshalConv = 5;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPTSTR_STR: MonoMarshalConv = 6;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_LPWSTR: MonoMarshalConv = 7;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPWSTR_STR: MonoMarshalConv = 8;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_LPTSTR: MonoMarshalConv = 9;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_ANSIBSTR: MonoMarshalConv = 10;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_TBSTR: MonoMarshalConv = 11;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_BYVALSTR: MonoMarshalConv = 12;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_BYVALWSTR: MonoMarshalConv = 13;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_SB_LPSTR: MonoMarshalConv = 14;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_SB_LPTSTR: MonoMarshalConv = 15;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_SB_LPWSTR: MonoMarshalConv = 16;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPSTR_SB: MonoMarshalConv = 17;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPTSTR_SB: MonoMarshalConv = 18;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_LPWSTR_SB: MonoMarshalConv = 19;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_ARRAY_BYVALARRAY: MonoMarshalConv = 20;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_ARRAY_BYVALCHARARRAY: MonoMarshalConv = 21;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_ARRAY_SAVEARRAY: MonoMarshalConv = 22;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_ARRAY_LPARRAY: MonoMarshalConv = 23;
pub const MonoMarshalConv_MONO_MARSHAL_FREE_LPARRAY: MonoMarshalConv = 24;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_OBJECT_INTERFACE: MonoMarshalConv = 25;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_OBJECT_IDISPATCH: MonoMarshalConv = 26;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_OBJECT_IUNKNOWN: MonoMarshalConv = 27;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_OBJECT_STRUCT: MonoMarshalConv = 28;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_DEL_FTN: MonoMarshalConv = 29;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_FTN_DEL: MonoMarshalConv = 30;
pub const MonoMarshalConv_MONO_MARSHAL_FREE_ARRAY: MonoMarshalConv = 31;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_BSTR_STR: MonoMarshalConv = 32;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_SAFEHANDLE: MonoMarshalConv = 33;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_HANDLEREF: MonoMarshalConv = 34;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_STR_UTF8STR: MonoMarshalConv = 35;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_SB_UTF8STR: MonoMarshalConv = 36;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_UTF8STR_STR: MonoMarshalConv = 37;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_UTF8STR_SB: MonoMarshalConv = 38;
pub const MonoMarshalConv_MONO_MARSHAL_CONV_FIXED_BUFFER: MonoMarshalConv = 39;
pub type MonoMarshalConv = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MonoMarshalSpec {
    pub native: MonoMarshalNative,
    pub data: MonoMarshalSpec__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MonoMarshalSpec__bindgen_ty_1 {
    pub array_data: MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1,
    pub custom_data: MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2,
    pub safearray_data: MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1 {
    pub elem_type: MonoMarshalNative,
    pub num_elem: i32,
    pub param_num: i16,
    pub elem_mult: i16,
}
#[test]
fn bindgen_test_layout_MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1>(),
        12usize,
        concat!(
            "Size of: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(elem_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_elem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(num_elem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_num) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(param_num)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_mult) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(elem_mult)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2 {
    pub custom_name: *mut ::std::os::raw::c_char,
    pub cookie: *mut ::std::os::raw::c_char,
    pub image: *mut MonoImage,
}
#[test]
fn bindgen_test_layout_MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2>(),
        24usize,
        concat!(
            "Size of: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(custom_name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cookie) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(cookie)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_2),
            "::",
            stringify!(image)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3 {
    pub elem_type: MonoMarshalVariant,
    pub num_elem: i32,
}
#[test]
fn bindgen_test_layout_MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3() {
    const UNINIT: ::std::mem::MaybeUninit<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).elem_type) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(elem_type)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_elem) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1__bindgen_ty_3),
            "::",
            stringify!(num_elem)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoMarshalSpec__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoMarshalSpec__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoMarshalSpec__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(MonoMarshalSpec__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoMarshalSpec__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoMarshalSpec__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1),
            "::",
            stringify!(array_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).custom_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1),
            "::",
            stringify!(custom_data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).safearray_data) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec__bindgen_ty_1),
            "::",
            stringify!(safearray_data)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoMarshalSpec() {
    const UNINIT: ::std::mem::MaybeUninit<MonoMarshalSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoMarshalSpec>(),
        32usize,
        concat!("Size of: ", stringify!(MonoMarshalSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoMarshalSpec>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoMarshalSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).native) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec),
            "::",
            stringify!(native)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoMarshalSpec),
            "::",
            stringify!(data)
        )
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_init();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_row(
        t: *const MonoTableInfo,
        idx: ::std::os::raw::c_int,
        res: *mut u32,
        res_size: ::std::os::raw::c_int,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_row_col(
        t: *const MonoTableInfo,
        idx: ::std::os::raw::c_int,
        col: ::std::os::raw::c_uint,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_compute_size(
        meta: *mut MonoImage,
        tableindex: ::std::os::raw::c_int,
        result_bitfield: *mut u32,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_locate(
        meta: *mut MonoImage,
        table: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_locate_token(
        meta: *mut MonoImage,
        token: u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_string_heap(
        meta: *mut MonoImage,
        table_index: u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_blob_heap(
        meta: *mut MonoImage,
        table_index: u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_user_string(
        meta: *mut MonoImage,
        table_index: u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_guid_heap(
        meta: *mut MonoImage,
        table_index: u32,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_typedef_from_field(meta: *mut MonoImage, table_index: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_typedef_from_method(meta: *mut MonoImage, table_index: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_nested_in_typedef(meta: *mut MonoImage, table_index: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_nesting_typedef(
        meta: *mut MonoImage,
        table_index: u32,
        start_index: u32,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_interfaces_from_typedef(
        meta: *mut MonoImage,
        table_index: u32,
        count: *mut ::std::os::raw::c_uint,
    ) -> *mut *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_events_from_typedef(
        meta: *mut MonoImage,
        table_index: u32,
        end_idx: *mut ::std::os::raw::c_uint,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_methods_from_event(
        meta: *mut MonoImage,
        table_index: u32,
        end: *mut ::std::os::raw::c_uint,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_properties_from_typedef(
        meta: *mut MonoImage,
        table_index: u32,
        end: *mut ::std::os::raw::c_uint,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_methods_from_property(
        meta: *mut MonoImage,
        table_index: u32,
        end: *mut ::std::os::raw::c_uint,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_packing_from_typedef(
        meta: *mut MonoImage,
        table_index: u32,
        packing: *mut u32,
        size: *mut u32,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_get_marshal_info(
        meta: *mut MonoImage,
        idx: u32,
        is_field: mono_bool,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_custom_attrs_from_index(meta: *mut MonoImage, cattr_index: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_marshal_spec(
        image: *mut MonoImage,
        ptr: *const ::std::os::raw::c_char,
    ) -> *mut MonoMarshalSpec;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_free_marshal_spec(spec: *mut MonoMarshalSpec);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_implmap_from_method(meta: *mut MonoImage, method_idx: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_field_info(
        meta: *mut MonoImage,
        table_index: u32,
        offset: *mut u32,
        rva: *mut u32,
        marshal_spec: *mut *mut MonoMarshalSpec,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_get_constant_index(meta: *mut MonoImage, token: u32, hint: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_value(
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_signed_value(
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_blob_size(
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_encode_value(
        value: u32,
        bug: *mut ::std::os::raw::c_char,
        endbuf: *mut *mut ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MonoExceptionClause {
    pub flags: u32,
    pub try_offset: u32,
    pub try_len: u32,
    pub handler_offset: u32,
    pub handler_len: u32,
    pub data: MonoExceptionClause__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MonoExceptionClause__bindgen_ty_1 {
    pub filter_offset: u32,
    pub catch_class: *mut MonoClass,
}
#[test]
fn bindgen_test_layout_MonoExceptionClause__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoExceptionClause__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoExceptionClause__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(MonoExceptionClause__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoExceptionClause__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(MonoExceptionClause__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).filter_offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause__bindgen_ty_1),
            "::",
            stringify!(filter_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).catch_class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause__bindgen_ty_1),
            "::",
            stringify!(catch_class)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoExceptionClause() {
    const UNINIT: ::std::mem::MaybeUninit<MonoExceptionClause> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoExceptionClause>(),
        32usize,
        concat!("Size of: ", stringify!(MonoExceptionClause))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoExceptionClause>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoExceptionClause))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(try_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).try_len) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(try_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler_offset) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(handler_offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).handler_len) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(handler_len)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoExceptionClause),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoType {
    _unused: [u8; 0],
}
pub type MonoType = _MonoType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoGenericInst {
    _unused: [u8; 0],
}
pub type MonoGenericInst = _MonoGenericInst;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoGenericClass {
    _unused: [u8; 0],
}
pub type MonoGenericClass = _MonoGenericClass;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoGenericContext {
    _unused: [u8; 0],
}
pub type MonoGenericContext = _MonoGenericContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoGenericContainer {
    _unused: [u8; 0],
}
pub type MonoGenericContainer = _MonoGenericContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoGenericParam {
    _unused: [u8; 0],
}
pub type MonoGenericParam = _MonoGenericParam;
pub type MonoArrayType = _MonoArrayType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoMethodSignature {
    _unused: [u8; 0],
}
pub type MonoMethodSignature = _MonoMethodSignature;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct invalid_name {
    _unused: [u8; 0],
}
pub type MonoGenericMethod = invalid_name;
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct MonoCustomMod {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_MonoCustomMod() {
    assert_eq!(
        ::std::mem::size_of::<MonoCustomMod>(),
        4usize,
        concat!("Size of: ", stringify!(MonoCustomMod))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoCustomMod>(),
        4usize,
        concat!("Alignment of ", stringify!(MonoCustomMod))
    );
}
impl MonoCustomMod {
    #[inline]
    pub fn required(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_required(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn token(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 31u8) as u32) }
    }
    #[inline]
    pub fn set_token(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 31u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        required: ::std::os::raw::c_uint,
        token: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let required: u32 = unsafe { ::std::mem::transmute(required) };
            required as u64
        });
        __bindgen_bitfield_unit.set(1usize, 31u8, {
            let token: u32 = unsafe { ::std::mem::transmute(token) };
            token as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoCustomModContainer {
    pub count: u8,
    pub image: *mut MonoImage,
    pub modifiers: [MonoCustomMod; 1usize],
}
#[test]
fn bindgen_test_layout__MonoCustomModContainer() {
    const UNINIT: ::std::mem::MaybeUninit<_MonoCustomModContainer> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_MonoCustomModContainer>(),
        24usize,
        concat!("Size of: ", stringify!(_MonoCustomModContainer))
    );
    assert_eq!(
        ::std::mem::align_of::<_MonoCustomModContainer>(),
        8usize,
        concat!("Alignment of ", stringify!(_MonoCustomModContainer))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).count) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoCustomModContainer),
            "::",
            stringify!(count)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoCustomModContainer),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).modifiers) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoCustomModContainer),
            "::",
            stringify!(modifiers)
        )
    );
}
pub type MonoCustomModContainer = _MonoCustomModContainer;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoArrayType {
    pub eklass: *mut MonoClass,
    pub rank: u8,
    pub numsizes: u8,
    pub numlobounds: u8,
    pub sizes: *mut ::std::os::raw::c_int,
    pub lobounds: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__MonoArrayType() {
    const UNINIT: ::std::mem::MaybeUninit<_MonoArrayType> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_MonoArrayType>(),
        32usize,
        concat!("Size of: ", stringify!(_MonoArrayType))
    );
    assert_eq!(
        ::std::mem::align_of::<_MonoArrayType>(),
        8usize,
        concat!("Alignment of ", stringify!(_MonoArrayType))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).eklass) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(eklass)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rank) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numsizes) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(numsizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).numlobounds) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(numlobounds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizes) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(sizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lobounds) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoArrayType),
            "::",
            stringify!(lobounds)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoMethodHeader {
    _unused: [u8; 0],
}
pub type MonoMethodHeader = _MonoMethodHeader;
pub const MonoParseTypeMode_MONO_PARSE_TYPE: MonoParseTypeMode = 0;
pub const MonoParseTypeMode_MONO_PARSE_MOD_TYPE: MonoParseTypeMode = 1;
pub const MonoParseTypeMode_MONO_PARSE_LOCAL: MonoParseTypeMode = 2;
pub const MonoParseTypeMode_MONO_PARSE_PARAM: MonoParseTypeMode = 3;
pub const MonoParseTypeMode_MONO_PARSE_RET: MonoParseTypeMode = 4;
pub const MonoParseTypeMode_MONO_PARSE_FIELD: MonoParseTypeMode = 5;
pub type MonoParseTypeMode = ::std::os::raw::c_int;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_byref(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_type(type_: *mut MonoType) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_signature(type_: *mut MonoType) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_class(type_: *mut MonoType) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_array_type(type_: *mut MonoType) -> *mut MonoArrayType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_ptr_type(type_: *mut MonoType) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_modifiers(
        type_: *mut MonoType,
        is_required: *mut mono_bool,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_struct(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_void(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_pointer(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_reference(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_is_generic_parameter(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_get_return_type(sig: *mut MonoMethodSignature) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_get_params(
        sig: *mut MonoMethodSignature,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_get_param_count(sig: *mut MonoMethodSignature) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_get_call_conv(sig: *mut MonoMethodSignature) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_vararg_start(sig: *mut MonoMethodSignature) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_is_instance(sig: *mut MonoMethodSignature) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_explicit_this(sig: *mut MonoMethodSignature) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_param_is_out(
        sig: *mut MonoMethodSignature,
        param_num: ::std::os::raw::c_int,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_typedef_or_ref(
        m: *mut MonoImage,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_custom_mod(
        m: *mut MonoImage,
        dest: *mut MonoCustomMod,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_array(
        m: *mut MonoImage,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> *mut MonoArrayType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_free_array(array: *mut MonoArrayType);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_type(
        m: *mut MonoImage,
        mode: MonoParseTypeMode,
        opt_attrs: ::std::os::raw::c_short,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_param(
        m: *mut MonoImage,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_field_type(
        m: *mut MonoImage,
        field_flags: ::std::os::raw::c_short,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_create_from_typespec(image: *mut MonoImage, type_spec: u32) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_free_type(type_: *mut MonoType);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_size(
        type_: *mut MonoType,
        alignment: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_stack_size(
        type_: *mut MonoType,
        alignment: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_generic_inst_is_valuetype(type_: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_generic_class_is_valuetype(gclass: *mut MonoGenericClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_type_hash(t1: *mut MonoType) -> ::std::os::raw::c_uint;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_type_equal(t1: *mut MonoType, t2: *mut MonoType) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_signature_alloc(
        image: *mut MonoImage,
        nparams: u32,
    ) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_signature_dup(sig: *mut MonoMethodSignature) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_signature(
        image: *mut MonoImage,
        token: u32,
    ) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_method_signature(
        m: *mut MonoImage,
        def: ::std::os::raw::c_int,
        ptr: *const ::std::os::raw::c_char,
        rptr: *mut *const ::std::os::raw::c_char,
    ) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_free_method_signature(method: *mut MonoMethodSignature);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_signature_equal(
        sig1: *mut MonoMethodSignature,
        sig2: *mut MonoMethodSignature,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_hash(sig: *mut MonoMethodSignature) -> ::std::os::raw::c_uint;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_parse_mh(
        m: *mut MonoImage,
        ptr: *const ::std::os::raw::c_char,
    ) -> *mut MonoMethodHeader;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_free_mh(mh: *mut MonoMethodHeader);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_header_get_code(
        header: *mut MonoMethodHeader,
        code_size: *mut u32,
        max_stack: *mut u32,
    ) -> *const ::std::os::raw::c_uchar;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_header_get_locals(
        header: *mut MonoMethodHeader,
        num_locals: *mut u32,
        init_locals: *mut mono_bool,
    ) -> *mut *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_header_get_num_clauses(
        header: *mut MonoMethodHeader,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_header_get_clauses(
        header: *mut MonoMethodHeader,
        method: *mut MonoMethod,
        iter: *mut *mut ::std::os::raw::c_void,
        clause: *mut MonoExceptionClause,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_to_unmanaged(
        type_: *mut MonoType,
        mspec: *mut MonoMarshalSpec,
        as_field: mono_bool,
        unicode: mono_bool,
        conv: *mut MonoMarshalConv,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_token_from_dor(dor_index: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_guid_to_string(guid: *const u8) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_guid_to_string_minimal(guid: *const u8) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_declsec_from_index(meta: *mut MonoImage, idx: u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_translate_token_index(
        image: *mut MonoImage,
        table: ::std::os::raw::c_int,
        idx: u32,
    ) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_table_row(
        image: *mut MonoImage,
        table: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        res: *mut u32,
        res_size: ::std::os::raw::c_int,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_metadata_decode_table_row_col(
        image: *mut MonoImage,
        table: ::std::os::raw::c_int,
        idx: ::std::os::raw::c_int,
        col: ::std::os::raw::c_uint,
    ) -> u32;
}
pub type MonoStackWalk = ::std::option::Option<
    unsafe extern "C" fn(
        method: *mut MonoMethod,
        native_offset: i32,
        il_offset: i32,
        managed: mono_bool,
        data: *mut ::std::os::raw::c_void,
    ) -> mono_bool,
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_method(
        image: *mut MonoImage,
        token: u32,
        klass: *mut MonoClass,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_method_full(
        image: *mut MonoImage,
        token: u32,
        klass: *mut MonoClass,
        context: *mut MonoGenericContext,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_method_constrained(
        image: *mut MonoImage,
        token: u32,
        constrained_class: *mut MonoClass,
        context: *mut MonoGenericContext,
        cil_method: *mut *mut MonoMethod,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_free_method(method: *mut MonoMethod);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_signature_full(
        method: *mut MonoMethod,
        image: *mut MonoImage,
        token: u32,
        context: *mut MonoGenericContext,
    ) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_signature(
        method: *mut MonoMethod,
        image: *mut MonoImage,
        token: u32,
    ) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_signature(method: *mut MonoMethod) -> *mut MonoMethodSignature;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_header(method: *mut MonoMethod) -> *mut MonoMethodHeader;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_name(method: *mut MonoMethod) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_class(method: *mut MonoMethod) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_token(method: *mut MonoMethod) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_flags(method: *mut MonoMethod, iflags: *mut u32) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_index(method: *mut MonoMethod) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_add_internal_call(
        name: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_dangerous_add_raw_internal_call(
        name: *const ::std::os::raw::c_char,
        method: *const ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_lookup_internal_call(method: *mut MonoMethod) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_lookup_icall_symbol(m: *mut MonoMethod) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_dllmap_insert(
        assembly: *mut MonoImage,
        dll: *const ::std::os::raw::c_char,
        func: *const ::std::os::raw::c_char,
        tdll: *const ::std::os::raw::c_char,
        tfunc: *const ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_lookup_pinvoke_call(
        method: *mut MonoMethod,
        exc_class: *mut *const ::std::os::raw::c_char,
        exc_arg: *mut *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_param_names(
        method: *mut MonoMethod,
        names: *mut *const ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_param_token(method: *mut MonoMethod, idx: ::std::os::raw::c_int) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_marshal_info(method: *mut MonoMethod, mspecs: *mut *mut MonoMarshalSpec);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_has_marshal_info(method: *mut MonoMethod) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_last_managed() -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_stack_walk(func: MonoStackWalk, user_data: *mut ::std::os::raw::c_void);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_stack_walk_no_il(func: MonoStackWalk, user_data: *mut ::std::os::raw::c_void);
}
pub type MonoStackWalkAsyncSafe = ::std::option::Option<
    unsafe extern "C" fn(
        method: *mut MonoMethod,
        domain: *mut MonoDomain,
        base_address: *mut ::std::os::raw::c_void,
        offset: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> mono_bool,
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_stack_walk_async_safe(
        func: MonoStackWalkAsyncSafe,
        initial_sig_context: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_header_checked(
        method: *mut MonoMethod,
        error: *mut MonoError,
    ) -> *mut MonoMethodHeader;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoProperty {
    _unused: [u8; 0],
}
pub type MonoProperty = _MonoProperty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoEvent {
    _unused: [u8; 0],
}
pub type MonoEvent = _MonoEvent;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get(image: *mut MonoImage, type_token: u32) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_full(
        image: *mut MonoImage,
        type_token: u32,
        context: *mut MonoGenericContext,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_init(klass: *mut MonoClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_vtable(domain: *mut MonoDomain, klass: *mut MonoClass) -> *mut MonoVTable;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_name(
        image: *mut MonoImage,
        name_space: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_name_case(
        image: *mut MonoImage,
        name_space: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_method_from_name_flags(
        klass: *mut MonoClass,
        name: *const ::std::os::raw::c_char,
        param_count: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_typeref(image: *mut MonoImage, type_token: u32) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_typeref_checked(
        image: *mut MonoImage,
        type_token: u32,
        error: *mut MonoError,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_generic_parameter(
        param: *mut MonoGenericParam,
        image: *mut MonoImage,
        is_mvar: mono_bool,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_inflate_generic_type(
        type_: *mut MonoType,
        context: *mut MonoGenericContext,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_inflate_generic_method(
        method: *mut MonoMethod,
        context: *mut MonoGenericContext,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_inflated_method(method: *mut MonoMethod) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_from_token(
        image: *mut MonoImage,
        token: u32,
        retklass: *mut *mut MonoClass,
        context: *mut MonoGenericContext,
    ) -> *mut MonoClassField;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_bounded_array_class_get(
        element_class: *mut MonoClass,
        rank: u32,
        bounded: mono_bool,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_class_get(element_class: *mut MonoClass, rank: u32) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_ptr_class_get(type_: *mut MonoType) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_field(klass: *mut MonoClass, field_token: u32) -> *mut MonoClassField;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_field_from_name(
        klass: *mut MonoClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoClassField;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_field_token(field: *mut MonoClassField) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_event_token(event: *mut MonoEvent) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_property_from_name(
        klass: *mut MonoClass,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoProperty;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_property_token(prop: *mut MonoProperty) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_element_size(ac: *mut MonoClass) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_instance_size(klass: *mut MonoClass) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_array_element_size(klass: *mut MonoClass) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_data_size(klass: *mut MonoClass) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_value_size(klass: *mut MonoClass, align: *mut u32) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_min_align(klass: *mut MonoClass) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_from_mono_type(type_: *mut MonoType) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_subclass_of(
        klass: *mut MonoClass,
        klassc: *mut MonoClass,
        check_interfaces: mono_bool,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_assignable_from(
        klass: *mut MonoClass,
        oklass: *mut MonoClass,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_ldtoken(
        image: *mut MonoImage,
        token: u32,
        retclass: *mut *mut MonoClass,
        context: *mut MonoGenericContext,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_name(type_: *mut MonoType) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_underlying_type(type_: *mut MonoType) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_image(klass: *mut MonoClass) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_element_class(klass: *mut MonoClass) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_valuetype(klass: *mut MonoClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_enum(klass: *mut MonoClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_enum_basetype(klass: *mut MonoClass) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_parent(klass: *mut MonoClass) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_nesting_type(klass: *mut MonoClass) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_rank(klass: *mut MonoClass) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_flags(klass: *mut MonoClass) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_name(klass: *mut MonoClass) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_namespace(klass: *mut MonoClass) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_type(klass: *mut MonoClass) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_type_token(klass: *mut MonoClass) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_byref_type(klass: *mut MonoClass) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_num_fields(klass: *mut MonoClass) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_num_methods(klass: *mut MonoClass) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_num_properties(klass: *mut MonoClass) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_num_events(klass: *mut MonoClass) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_fields(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoClassField;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_methods(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_properties(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoProperty;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_events(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoEvent;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_interfaces(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_nested_types(
        klass: *mut MonoClass,
        iter: *mut *mut ::std::os::raw::c_void,
    ) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_delegate(klass: *mut MonoClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_implements_interface(
        klass: *mut MonoClass,
        iface: *mut MonoClass,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_name(field: *mut MonoClassField) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_type(field: *mut MonoClassField) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_parent(field: *mut MonoClassField) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_flags(field: *mut MonoClassField) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_offset(field: *mut MonoClassField) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_data(field: *mut MonoClassField) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_name(prop: *mut MonoProperty) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_set_method(prop: *mut MonoProperty) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_get_method(prop: *mut MonoProperty) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_parent(prop: *mut MonoProperty) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_flags(prop: *mut MonoProperty) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_name(event: *mut MonoEvent) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_add_method(event: *mut MonoEvent) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_remove_method(event: *mut MonoEvent) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_raise_method(event: *mut MonoEvent) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_parent(event: *mut MonoEvent) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_flags(event: *mut MonoEvent) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_method_from_name(
        klass: *mut MonoClass,
        name: *const ::std::os::raw::c_char,
        param_count: ::std::os::raw::c_int,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_name_from_token(
        image: *mut MonoImage,
        type_token: u32,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_can_access_field(
        method: *mut MonoMethod,
        field: *mut MonoClassField,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_can_access_method(
        method: *mut MonoMethod,
        called: *mut MonoMethod,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_is_nullable(klass: *mut MonoClass) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_class_get_nullable_param(klass: *mut MonoClass) -> *mut MonoClass;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionMethod {
    _unused: [u8; 0],
}
pub type MonoReflectionMethod = _MonoReflectionMethod;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionModule {
    _unused: [u8; 0],
}
pub type MonoReflectionModule = _MonoReflectionModule;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionField {
    _unused: [u8; 0],
}
pub type MonoReflectionField = _MonoReflectionField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionProperty {
    _unused: [u8; 0],
}
pub type MonoReflectionProperty = _MonoReflectionProperty;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionEvent {
    _unused: [u8; 0],
}
pub type MonoReflectionEvent = _MonoReflectionEvent;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionType {
    _unused: [u8; 0],
}
pub type MonoReflectionType = _MonoReflectionType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoDelegate {
    _unused: [u8; 0],
}
pub type MonoDelegate = _MonoDelegate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoThreadsSync {
    _unused: [u8; 0],
}
pub type MonoThreadsSync = _MonoThreadsSync;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoThread {
    _unused: [u8; 0],
}
pub type MonoThread = _MonoThread;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoDynamicAssembly {
    _unused: [u8; 0],
}
pub type MonoDynamicAssembly = _MonoDynamicAssembly;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoDynamicImage {
    _unused: [u8; 0],
}
pub type MonoDynamicImage = _MonoDynamicImage;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReflectionMethodBody {
    _unused: [u8; 0],
}
pub type MonoReflectionMethodBody = _MonoReflectionMethodBody;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoAppContext {
    _unused: [u8; 0],
}
pub type MonoAppContext = _MonoAppContext;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoObject {
    pub vtable: *mut MonoVTable,
    pub synchronisation: *mut MonoThreadsSync,
}
#[test]
fn bindgen_test_layout__MonoObject() {
    const UNINIT: ::std::mem::MaybeUninit<_MonoObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<_MonoObject>(),
        16usize,
        concat!("Size of: ", stringify!(_MonoObject))
    );
    assert_eq!(
        ::std::mem::align_of::<_MonoObject>(),
        8usize,
        concat!("Alignment of ", stringify!(_MonoObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vtable) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoObject),
            "::",
            stringify!(vtable)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).synchronisation) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_MonoObject),
            "::",
            stringify!(synchronisation)
        )
    );
}
pub type MonoInvokeFunc = ::std::option::Option<
    unsafe extern "C" fn(
        method: *mut MonoMethod,
        obj: *mut ::std::os::raw::c_void,
        params: *mut *mut ::std::os::raw::c_void,
        exc: *mut *mut MonoObject,
        error: *mut MonoError,
    ) -> *mut MonoObject,
>;
pub type MonoCompileFunc = ::std::option::Option<
    unsafe extern "C" fn(method: *mut MonoMethod) -> *mut ::std::os::raw::c_void,
>;
pub type MonoMainThreadFunc =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_chars(s: *mut MonoString) -> *mut mono_unichar2;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_length(s: *mut MonoString) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_new(domain: *mut MonoDomain, klass: *mut MonoClass) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_new_specific(vtable: *mut MonoVTable) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_new_fast(vtable: *mut MonoVTable) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_new_alloc_specific(vtable: *mut MonoVTable) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_new_from_token(
        domain: *mut MonoDomain,
        image: *mut MonoImage,
        token: u32,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_new(
        domain: *mut MonoDomain,
        eclass: *mut MonoClass,
        n: usize,
    ) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_new_full(
        domain: *mut MonoDomain,
        array_class: *mut MonoClass,
        lengths: *mut usize,
        lower_bounds: *mut isize,
    ) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_new_specific(vtable: *mut MonoVTable, n: usize) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_clone(array: *mut MonoArray) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_addr_with_size(
        array: *mut MonoArray,
        size: ::std::os::raw::c_int,
        idx: usize,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_array_length(array: *mut MonoArray) -> usize;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_empty(domain: *mut MonoDomain) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_empty_wrapper() -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new_utf16(
        domain: *mut MonoDomain,
        text: *const mono_unichar2,
        len: i32,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new_size(domain: *mut MonoDomain, len: i32) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_ldstr(
        domain: *mut MonoDomain,
        image: *mut MonoImage,
        str_index: u32,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_is_interned(str_: *mut MonoString) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_intern(str_: *mut MonoString) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new(
        domain: *mut MonoDomain,
        text: *const ::std::os::raw::c_char,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new_wrapper(text: *const ::std::os::raw::c_char) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new_len(
        domain: *mut MonoDomain,
        text: *const ::std::os::raw::c_char,
        length: ::std::os::raw::c_uint,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_new_utf32(
        domain: *mut MonoDomain,
        text: *const mono_unichar4,
        len: i32,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_to_utf8(string_obj: *mut MonoString) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_to_utf8_checked(
        string_obj: *mut MonoString,
        error: *mut MonoError,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_to_utf16(string_obj: *mut MonoString) -> *mut mono_unichar2;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_to_utf32(string_obj: *mut MonoString) -> *mut mono_unichar4;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_from_utf16(data: *mut mono_unichar2) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_from_utf32(data: *mut mono_unichar4) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_equal(s1: *mut MonoString, s2: *mut MonoString) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_string_hash(s: *mut MonoString) -> ::std::os::raw::c_uint;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_hash(obj: *mut MonoObject) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_to_string(
        obj: *mut MonoObject,
        exc: *mut *mut MonoObject,
    ) -> *mut MonoString;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_value_box(
        domain: *mut MonoDomain,
        klass: *mut MonoClass,
        val: *mut ::std::os::raw::c_void,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_value_copy(
        dest: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        klass: *mut MonoClass,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_value_copy_array(
        dest: *mut MonoArray,
        dest_idx: ::std::os::raw::c_int,
        src: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_get_vtable(obj: *mut MonoObject) -> *mut MonoVTable;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_get_domain(obj: *mut MonoObject) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_get_class(obj: *mut MonoObject) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_unbox(obj: *mut MonoObject) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_clone(obj: *mut MonoObject) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_isinst(obj: *mut MonoObject, klass: *mut MonoClass) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_isinst_mbyref(
        obj: *mut MonoObject,
        klass: *mut MonoClass,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_castclass_mbyref(
        obj: *mut MonoObject,
        klass: *mut MonoClass,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_monitor_try_enter(obj: *mut MonoObject, ms: u32) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_monitor_enter(obj: *mut MonoObject) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_monitor_enter_v4(obj: *mut MonoObject, lock_taken: *mut ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_get_size(o: *mut MonoObject) -> ::std::os::raw::c_uint;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_monitor_exit(obj: *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_raise_exception(ex: *mut MonoException);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_set_pending_exception(
        exc: *mut MonoException,
        overwrite: mono_bool,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reraise_exception(ex: *mut MonoException);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_object_init(this_obj: *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_class_init(vtable: *mut MonoVTable);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_vtable_domain(vtable: *mut MonoVTable) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_vtable_class(vtable: *mut MonoVTable) -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_object_get_virtual_method(
        obj: *mut MonoObject,
        method: *mut MonoMethod,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_invoke(
        method: *mut MonoMethod,
        obj: *mut ::std::os::raw::c_void,
        params: *mut *mut ::std::os::raw::c_void,
        exc: *mut *mut MonoObject,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_delegate_invoke(klass: *mut MonoClass) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_delegate_begin_invoke(klass: *mut MonoClass) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_delegate_end_invoke(klass: *mut MonoClass) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_delegate_invoke(
        delegate: *mut MonoObject,
        params: *mut *mut ::std::os::raw::c_void,
        exc: *mut *mut MonoObject,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_invoke_array(
        method: *mut MonoMethod,
        obj: *mut ::std::os::raw::c_void,
        params: *mut MonoArray,
        exc: *mut *mut MonoObject,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_unmanaged_thunk(method: *mut MonoMethod) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_get_main_args() -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_exec_managed_code(
        domain: *mut MonoDomain,
        main_func: MonoMainThreadFunc,
        main_args: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_run_main(
        method: *mut MonoMethod,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
        exc: *mut *mut MonoObject,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_exec_main(
        method: *mut MonoMethod,
        args: *mut MonoArray,
        exc: *mut *mut MonoObject,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_set_main_args(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_load_remote_field(
        this_obj: *mut MonoObject,
        klass: *mut MonoClass,
        field: *mut MonoClassField,
        res: *mut *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_load_remote_field_new(
        this_obj: *mut MonoObject,
        klass: *mut MonoClass,
        field: *mut MonoClassField,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_store_remote_field(
        this_obj: *mut MonoObject,
        klass: *mut MonoClass,
        field: *mut MonoClassField,
        val: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_store_remote_field_new(
        this_obj: *mut MonoObject,
        klass: *mut MonoClass,
        field: *mut MonoClassField,
        arg: *mut MonoObject,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_unhandled_exception(exc: *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_print_unhandled_exception(exc: *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_compile_method(method: *mut MonoMethod) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_set_value(
        obj: *mut MonoObject,
        field: *mut MonoClassField,
        value: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_static_set_value(
        vt: *mut MonoVTable,
        field: *mut MonoClassField,
        value: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_value(
        obj: *mut MonoObject,
        field: *mut MonoClassField,
        value: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_static_get_value(
        vt: *mut MonoVTable,
        field: *mut MonoClassField,
        value: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_value_object(
        domain: *mut MonoDomain,
        field: *mut MonoClassField,
        obj: *mut MonoObject,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_set_value(
        prop: *mut MonoProperty,
        obj: *mut ::std::os::raw::c_void,
        params: *mut *mut ::std::os::raw::c_void,
        exc: *mut *mut MonoObject,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_value(
        prop: *mut MonoProperty,
        obj: *mut ::std::os::raw::c_void,
        params: *mut *mut ::std::os::raw::c_void,
        exc: *mut *mut MonoObject,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gchandle_new(obj: *mut MonoObject, pinned: mono_bool) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gchandle_new_weakref(obj: *mut MonoObject, track_resurrection: mono_bool) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gchandle_get_target(gchandle: u32) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gchandle_free(gchandle: u32);
}
pub type mono_reference_queue_callback =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoReferenceQueue {
    _unused: [u8; 0],
}
pub type MonoReferenceQueue = _MonoReferenceQueue;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_reference_queue_new(
        callback: mono_reference_queue_callback,
    ) -> *mut MonoReferenceQueue;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_reference_queue_free(queue: *mut MonoReferenceQueue);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_reference_queue_add(
        queue: *mut MonoReferenceQueue,
        obj: *mut MonoObject,
        user_data: *mut ::std::os::raw::c_void,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_set_field(
        obj: *mut MonoObject,
        field_ptr: *mut ::std::os::raw::c_void,
        value: *mut MonoObject,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_set_arrayref(
        arr: *mut MonoArray,
        slot_ptr: *mut ::std::os::raw::c_void,
        value: *mut MonoObject,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_arrayref_copy(
        dest_ptr: *mut ::std::os::raw::c_void,
        src_ptr: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_generic_store(ptr: *mut ::std::os::raw::c_void, value: *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_generic_store_atomic(
        ptr: *mut ::std::os::raw::c_void,
        value: *mut MonoObject,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_generic_nostore(ptr: *mut ::std::os::raw::c_void);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_value_copy(
        dest: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        klass: *mut MonoClass,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_gc_wbarrier_object_copy(obj: *mut MonoObject, src: *mut MonoObject);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoTypeNameParse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoCustomAttrEntry {
    pub ctor: *mut MonoMethod,
    pub data_size: u32,
    pub data: *const mono_byte,
}
#[test]
fn bindgen_test_layout_MonoCustomAttrEntry() {
    const UNINIT: ::std::mem::MaybeUninit<MonoCustomAttrEntry> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoCustomAttrEntry>(),
        24usize,
        concat!("Size of: ", stringify!(MonoCustomAttrEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoCustomAttrEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoCustomAttrEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ctor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrEntry),
            "::",
            stringify!(ctor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data_size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrEntry),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrEntry),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoCustomAttrInfo {
    pub num_attrs: ::std::os::raw::c_int,
    pub cached: ::std::os::raw::c_int,
    pub image: *mut MonoImage,
    pub attrs: [MonoCustomAttrEntry; 1usize],
}
#[test]
fn bindgen_test_layout_MonoCustomAttrInfo() {
    const UNINIT: ::std::mem::MaybeUninit<MonoCustomAttrInfo> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoCustomAttrInfo>(),
        40usize,
        concat!("Size of: ", stringify!(MonoCustomAttrInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoCustomAttrInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoCustomAttrInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).num_attrs) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrInfo),
            "::",
            stringify!(num_attrs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cached) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrInfo),
            "::",
            stringify!(cached)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).image) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrInfo),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attrs) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoCustomAttrInfo),
            "::",
            stringify!(attrs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoReflectionMethodAux {
    pub param_names: *mut *mut ::std::os::raw::c_char,
    pub param_marshall: *mut *mut MonoMarshalSpec,
    pub param_cattr: *mut *mut MonoCustomAttrInfo,
    pub param_defaults: *mut *mut u8,
    pub param_default_types: *mut u32,
    pub dllentry: *mut ::std::os::raw::c_char,
    pub dll: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_MonoReflectionMethodAux() {
    const UNINIT: ::std::mem::MaybeUninit<MonoReflectionMethodAux> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoReflectionMethodAux>(),
        56usize,
        concat!("Size of: ", stringify!(MonoReflectionMethodAux))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoReflectionMethodAux>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoReflectionMethodAux))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_names) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(param_names)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_marshall) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(param_marshall)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_cattr) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(param_cattr)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_defaults) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(param_defaults)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param_default_types) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(param_default_types)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dllentry) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(dllentry)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dll) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoReflectionMethodAux),
            "::",
            stringify!(dll)
        )
    );
}
pub const MonoResolveTokenError_ResolveTokenError_OutOfRange: MonoResolveTokenError = 0;
pub const MonoResolveTokenError_ResolveTokenError_BadTable: MonoResolveTokenError = 1;
pub const MonoResolveTokenError_ResolveTokenError_Other: MonoResolveTokenError = 2;
pub type MonoResolveTokenError = ::std::os::raw::c_int;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_parse_type(
        name: *mut ::std::os::raw::c_char,
        info: *mut MonoTypeNameParse,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_type(
        image: *mut MonoImage,
        info: *mut MonoTypeNameParse,
        ignorecase: mono_bool,
        type_resolve: *mut mono_bool,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_free_type_info(info: *mut MonoTypeNameParse);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_type_from_name(
        name: *mut ::std::os::raw::c_char,
        image: *mut MonoImage,
    ) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_token(obj: *mut MonoObject) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_get_object(
        domain: *mut MonoDomain,
        assembly: *mut MonoAssembly,
    ) -> *mut MonoReflectionAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_module_get_object(
        domain: *mut MonoDomain,
        image: *mut MonoImage,
    ) -> *mut MonoReflectionModule;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_module_file_get_object(
        domain: *mut MonoDomain,
        image: *mut MonoImage,
        table_index: ::std::os::raw::c_int,
    ) -> *mut MonoReflectionModule;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_get_object(
        domain: *mut MonoDomain,
        type_: *mut MonoType,
    ) -> *mut MonoReflectionType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_object(
        domain: *mut MonoDomain,
        method: *mut MonoMethod,
        refclass: *mut MonoClass,
    ) -> *mut MonoReflectionMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_get_object(
        domain: *mut MonoDomain,
        klass: *mut MonoClass,
        field: *mut MonoClassField,
    ) -> *mut MonoReflectionField;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_property_get_object(
        domain: *mut MonoDomain,
        klass: *mut MonoClass,
        property: *mut MonoProperty,
    ) -> *mut MonoReflectionProperty;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_event_get_object(
        domain: *mut MonoDomain,
        klass: *mut MonoClass,
        event: *mut MonoEvent,
    ) -> *mut MonoReflectionEvent;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_param_get_objects(
        domain: *mut MonoDomain,
        method: *mut MonoMethod,
    ) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_body_get_object(
        domain: *mut MonoDomain,
        method: *mut MonoMethod,
    ) -> *mut MonoReflectionMethodBody;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_dbnull_object(domain: *mut MonoDomain) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_custom_attrs_by_type(
        obj: *mut MonoObject,
        attr_klass: *mut MonoClass,
        error: *mut MonoError,
    ) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_custom_attrs(obj: *mut MonoObject) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_custom_attrs_data(obj: *mut MonoObject) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_custom_attrs_blob(
        assembly: *mut MonoReflectionAssembly,
        ctor: *mut MonoObject,
        ctorArgs: *mut MonoArray,
        properties: *mut MonoArray,
        porpValues: *mut MonoArray,
        fields: *mut MonoArray,
        fieldValues: *mut MonoArray,
    ) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_get_custom_attrs_info(obj: *mut MonoObject) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_construct(cinfo: *mut MonoCustomAttrInfo) -> *mut MonoArray;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_index(image: *mut MonoImage, idx: u32)
        -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_method(method: *mut MonoMethod) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_class(klass: *mut MonoClass) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_assembly(assembly: *mut MonoAssembly) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_property(
        klass: *mut MonoClass,
        property: *mut MonoProperty,
    ) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_event(
        klass: *mut MonoClass,
        event: *mut MonoEvent,
    ) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_field(
        klass: *mut MonoClass,
        field: *mut MonoClassField,
    ) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_from_param(
        method: *mut MonoMethod,
        param: u32,
    ) -> *mut MonoCustomAttrInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_has_attr(
        ainfo: *mut MonoCustomAttrInfo,
        attr_klass: *mut MonoClass,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_get_attr(
        ainfo: *mut MonoCustomAttrInfo,
        attr_klass: *mut MonoClass,
    ) -> *mut MonoObject;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_custom_attrs_free(ainfo: *mut MonoCustomAttrInfo);
}
pub const MONO_DECLSEC_FLAG_REQUEST: _bindgen_ty_65 = 1;
pub const MONO_DECLSEC_FLAG_DEMAND: _bindgen_ty_65 = 2;
pub const MONO_DECLSEC_FLAG_ASSERT: _bindgen_ty_65 = 4;
pub const MONO_DECLSEC_FLAG_DENY: _bindgen_ty_65 = 8;
pub const MONO_DECLSEC_FLAG_PERMITONLY: _bindgen_ty_65 = 16;
pub const MONO_DECLSEC_FLAG_LINKDEMAND: _bindgen_ty_65 = 32;
pub const MONO_DECLSEC_FLAG_INHERITANCEDEMAND: _bindgen_ty_65 = 64;
pub const MONO_DECLSEC_FLAG_REQUEST_MINIMUM: _bindgen_ty_65 = 128;
pub const MONO_DECLSEC_FLAG_REQUEST_OPTIONAL: _bindgen_ty_65 = 256;
pub const MONO_DECLSEC_FLAG_REQUEST_REFUSE: _bindgen_ty_65 = 512;
pub const MONO_DECLSEC_FLAG_PREJIT_GRANT: _bindgen_ty_65 = 1024;
pub const MONO_DECLSEC_FLAG_PREJIT_DENY: _bindgen_ty_65 = 2048;
pub const MONO_DECLSEC_FLAG_NONCAS_DEMAND: _bindgen_ty_65 = 4096;
pub const MONO_DECLSEC_FLAG_NONCAS_LINKDEMAND: _bindgen_ty_65 = 8192;
pub const MONO_DECLSEC_FLAG_NONCAS_INHERITANCEDEMAND: _bindgen_ty_65 = 16384;
pub const MONO_DECLSEC_FLAG_LINKDEMAND_CHOICE: _bindgen_ty_65 = 32768;
pub const MONO_DECLSEC_FLAG_INHERITANCEDEMAND_CHOICE: _bindgen_ty_65 = 65536;
pub const MONO_DECLSEC_FLAG_DEMAND_CHOICE: _bindgen_ty_65 = 131072;
pub type _bindgen_ty_65 = ::std::os::raw::c_int;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_flags_from_method(method: *mut MonoMethod) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_flags_from_class(klass: *mut MonoClass) -> u32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_flags_from_assembly(assembly: *mut MonoAssembly) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoDeclSecurityEntry {
    pub blob: *mut ::std::os::raw::c_char,
    pub size: u32,
    pub index: u32,
}
#[test]
fn bindgen_test_layout_MonoDeclSecurityEntry() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDeclSecurityEntry> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDeclSecurityEntry>(),
        16usize,
        concat!("Size of: ", stringify!(MonoDeclSecurityEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDeclSecurityEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoDeclSecurityEntry))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).blob) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityEntry),
            "::",
            stringify!(blob)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityEntry),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).index) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityEntry),
            "::",
            stringify!(index)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoDeclSecurityActions {
    pub demand: MonoDeclSecurityEntry,
    pub noncasdemand: MonoDeclSecurityEntry,
    pub demandchoice: MonoDeclSecurityEntry,
}
#[test]
fn bindgen_test_layout_MonoDeclSecurityActions() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDeclSecurityActions> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDeclSecurityActions>(),
        48usize,
        concat!("Size of: ", stringify!(MonoDeclSecurityActions))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDeclSecurityActions>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoDeclSecurityActions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).demand) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityActions),
            "::",
            stringify!(demand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).noncasdemand) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityActions),
            "::",
            stringify!(noncasdemand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).demandchoice) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDeclSecurityActions),
            "::",
            stringify!(demandchoice)
        )
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_demands(
        callee: *mut MonoMethod,
        demands: *mut MonoDeclSecurityActions,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_linkdemands(
        callee: *mut MonoMethod,
        klass: *mut MonoDeclSecurityActions,
        cmethod: *mut MonoDeclSecurityActions,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_inheritdemands_class(
        klass: *mut MonoClass,
        demands: *mut MonoDeclSecurityActions,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_inheritdemands_method(
        callee: *mut MonoMethod,
        demands: *mut MonoDeclSecurityActions,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_method_action(
        method: *mut MonoMethod,
        action: u32,
        entry: *mut MonoDeclSecurityEntry,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_class_action(
        klass: *mut MonoClass,
        action: u32,
        entry: *mut MonoDeclSecurityEntry,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_declsec_get_assembly_action(
        assembly: *mut MonoAssembly,
        action: u32,
        entry: *mut MonoDeclSecurityEntry,
    ) -> MonoBoolean;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_type_get_type(reftype: *mut MonoReflectionType) -> *mut MonoType;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_reflection_assembly_get_assembly(
        refassembly: *mut MonoReflectionAssembly,
    ) -> *mut MonoAssembly;
}
pub type MonoThreadStartCB = ::std::option::Option<
    unsafe extern "C" fn(
        tid: isize,
        stack_start: *mut ::std::os::raw::c_void,
        func: *mut ::std::os::raw::c_void,
    ),
>;
pub type MonoThreadAttachCB = ::std::option::Option<
    unsafe extern "C" fn(tid: isize, stack_start: *mut ::std::os::raw::c_void),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _MonoAppDomain {
    _unused: [u8; 0],
}
pub type MonoAppDomain = _MonoAppDomain;
pub type MonoDomainFunc = ::std::option::Option<
    unsafe extern "C" fn(domain: *mut MonoDomain, user_data: *mut ::std::os::raw::c_void),
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_init(filename: *const ::std::os::raw::c_char) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_init_from_assembly(
        domain_name: *const ::std::os::raw::c_char,
        filename: *const ::std::os::raw::c_char,
    ) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_init_version(
        domain_name: *const ::std::os::raw::c_char,
        version: *const ::std::os::raw::c_char,
    ) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_root_domain() -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_init(
        domain: *mut MonoDomain,
        start_cb: MonoThreadStartCB,
        attach_cb: MonoThreadAttachCB,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_cleanup(domain: *mut MonoDomain);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_runtime_cleanup(func: MonoDomainFunc);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_quit();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_set_shutting_down();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_runtime_is_shutting_down() -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_check_corlib_version() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_create() -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_create_appdomain(
        friendly_name: *mut ::std::os::raw::c_char,
        configuration_file: *mut ::std::os::raw::c_char,
    ) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_set_config(
        domain: *mut MonoDomain,
        base_dir: *const ::std::os::raw::c_char,
        config_file_name: *const ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_get() -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_get_by_id(domainid: i32) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_get_id(domain: *mut MonoDomain) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_get_friendly_name(domain: *mut MonoDomain) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_set(domain: *mut MonoDomain, force: mono_bool) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_set_internal(domain: *mut MonoDomain);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_unload(domain: *mut MonoDomain);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_try_unload(domain: *mut MonoDomain, exc: *mut *mut MonoObject);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_is_unloading(domain: *mut MonoDomain) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_from_appdomain(appdomain: *mut MonoAppDomain) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_foreach(func: MonoDomainFunc, user_data: *mut ::std::os::raw::c_void);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_assembly_open(
        domain: *mut MonoDomain,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_finalize(domain: *mut MonoDomain, timeout: u32) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_free(domain: *mut MonoDomain, force: mono_bool);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_has_type_resolve(domain: *mut MonoDomain) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_try_type_resolve(
        domain: *mut MonoDomain,
        name: *mut ::std::os::raw::c_char,
        tb: *mut MonoObject,
    ) -> *mut MonoReflectionAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_domain_owns_vtable_slot(
        domain: *mut MonoDomain,
        vtable_slot: *mut ::std::os::raw::c_void,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_init(domain: *mut MonoDomain);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_set(new_context: *mut MonoAppContext);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_get() -> *mut MonoAppContext;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_get_id(context: *mut MonoAppContext) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_get_domain_id(context: *mut MonoAppContext) -> i32;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_info_table_find(
        domain: *mut MonoDomain,
        addr: *mut ::std::os::raw::c_void,
    ) -> *mut MonoJitInfo;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_info_get_code_start(ji: *mut MonoJitInfo) -> *mut ::std::os::raw::c_void;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_info_get_code_size(ji: *mut MonoJitInfo) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_info_get_method(ji: *mut MonoJitInfo) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_corlib() -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_object_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_byte_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_void_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_boolean_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_sbyte_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_int16_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_uint16_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_int32_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_uint32_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_intptr_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_uintptr_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_int64_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_uint64_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_single_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_double_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_char_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_string_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_enum_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_array_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_thread_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_exception_class() -> *mut MonoClass;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_security_enable_core_clr();
}
pub type MonoCoreClrPlatformCB = ::std::option::Option<
    unsafe extern "C" fn(image_name: *const ::std::os::raw::c_char) -> mono_bool,
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_security_set_core_clr_platform_callback(callback: MonoCoreClrPlatformCB);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_init(file: *const ::std::os::raw::c_char) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_init_version(
        root_domain_name: *const ::std::os::raw::c_char,
        runtime_version: *const ::std::os::raw::c_char,
    ) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_init_version_for_test_only(
        root_domain_name: *const ::std::os::raw::c_char,
        runtime_version: *const ::std::os::raw::c_char,
    ) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_exec(
        domain: *mut MonoDomain,
        assembly: *mut MonoAssembly,
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_cleanup(domain: *mut MonoDomain);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_set_trace_options(options: *const ::std::os::raw::c_char) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_signal_chaining(chain_signals: mono_bool);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_crash_chaining(chain_signals: mono_bool);
}
#[link(name = "monosgen-2.0")] extern "C" {
    #[doc = " This function is deprecated, use mono_jit_set_aot_mode instead."]
    pub fn mono_jit_set_aot_only(aot_only: mono_bool);
}
pub const MonoAotMode_MONO_AOT_MODE_NONE: MonoAotMode = 0;
pub const MonoAotMode_MONO_AOT_MODE_NORMAL: MonoAotMode = 1;
pub const MonoAotMode_MONO_AOT_MODE_HYBRID: MonoAotMode = 2;
pub const MonoAotMode_MONO_AOT_MODE_FULL: MonoAotMode = 3;
pub const MonoAotMode_MONO_AOT_MODE_LLVMONLY: MonoAotMode = 4;
pub const MonoAotMode_MONO_AOT_MODE_INTERP: MonoAotMode = 5;
pub const MonoAotMode_MONO_AOT_MODE_INTERP_LLVMONLY: MonoAotMode = 6;
pub const MonoAotMode_MONO_AOT_MODE_LLVMONLY_INTERP: MonoAotMode = 7;
pub const MonoAotMode_MONO_AOT_MODE_LAST: MonoAotMode = 1000;
#[doc = " Allows control over our AOT (Ahead-of-time) compilation mode."]
pub type MonoAotMode = ::std::os::raw::c_int;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_set_aot_mode(mode: MonoAotMode);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_aot_compiling() -> mono_bool;
}
pub const MonoBreakPolicy_MONO_BREAK_POLICY_ALWAYS: MonoBreakPolicy = 0;
pub const MonoBreakPolicy_MONO_BREAK_POLICY_NEVER: MonoBreakPolicy = 1;
pub const MonoBreakPolicy_MONO_BREAK_POLICY_ON_DBG: MonoBreakPolicy = 2;
pub type MonoBreakPolicy = ::std::os::raw::c_int;
pub type MonoBreakPolicyFunc =
    ::std::option::Option<unsafe extern "C" fn(method: *mut MonoMethod) -> MonoBreakPolicy>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_break_policy(policy_callback: MonoBreakPolicyFunc);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_parse_options(
        argc: ::std::os::raw::c_int,
        argv: *mut *mut ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_runtime_build_info() -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_use_llvm(use_llvm: mono_bool);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_aot_register_module(aot_info: *mut *mut ::std::os::raw::c_void);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_jit_thread_attach(domain: *mut MonoDomain) -> *mut MonoDomain;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_get_os() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_get_cpu() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_get_wordsize() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_config_dir() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_config_dir(dir: *const ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_get_machine_config() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_cleanup();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_parse(filename: *const ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_for_assembly(assembly: *mut MonoImage);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_parse_memory(buffer: *const ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_string_for_assembly_file(
        filename: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_set_server_mode(server_mode: mono_bool);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_config_is_server_mode() -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assemblies_init();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assemblies_cleanup();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_open(
        filename: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_open_full(
        filename: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load(
        aname: *mut MonoAssemblyName,
        basedir: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_full(
        aname: *mut MonoAssemblyName,
        basedir: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_from(
        image: *mut MonoImage,
        fname: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_from_full(
        image: *mut MonoImage,
        fname: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
        refonly: mono_bool,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_with_partial_name(
        name: *const ::std::os::raw::c_char,
        status: *mut MonoImageOpenStatus,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_loaded(aname: *mut MonoAssemblyName) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_loaded_full(
        aname: *mut MonoAssemblyName,
        refonly: mono_bool,
    ) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_get_assemblyref(
        image: *mut MonoImage,
        index: ::std::os::raw::c_int,
        aname: *mut MonoAssemblyName,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_reference(image: *mut MonoImage, index: ::std::os::raw::c_int);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_references(image: *mut MonoImage, status: *mut MonoImageOpenStatus);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_load_module(assembly: *mut MonoAssembly, idx: u32) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_close(assembly: *mut MonoAssembly);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_setrootdir(root_dir: *const ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_getrootdir() -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_native_getrootdir() -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_foreach(func: MonoFunc, user_data: *mut ::std::os::raw::c_void);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_set_main(assembly: *mut MonoAssembly);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_get_main() -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_get_image(assembly: *mut MonoAssembly) -> *mut MonoImage;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_get_name(assembly: *mut MonoAssembly) -> *mut MonoAssemblyName;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_fill_assembly_name(
        image: *mut MonoImage,
        aname: *mut MonoAssemblyName,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_names_equal(
        l: *mut MonoAssemblyName,
        r: *mut MonoAssemblyName,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_stringify_assembly_name(
        aname: *mut MonoAssemblyName,
    ) -> *mut ::std::os::raw::c_char;
}
pub type MonoAssemblyLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(assembly: *mut MonoAssembly, user_data: *mut ::std::os::raw::c_void),
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_load_hook(
        func: MonoAssemblyLoadFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type MonoAssemblySearchFunc = ::std::option::Option<
    unsafe extern "C" fn(
        aname: *mut MonoAssemblyName,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut MonoAssembly,
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_search_hook(
        func: MonoAssemblySearchFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_refonly_search_hook(
        func: MonoAssemblySearchFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_invoke_search_hook(aname: *mut MonoAssemblyName) -> *mut MonoAssembly;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_postload_search_hook(
        func: MonoAssemblySearchFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_postload_refonly_search_hook(
        func: MonoAssemblySearchFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
pub type MonoAssemblyPreLoadFunc = ::std::option::Option<
    unsafe extern "C" fn(
        aname: *mut MonoAssemblyName,
        assemblies_path: *mut *mut ::std::os::raw::c_char,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut MonoAssembly,
>;
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_preload_hook(
        func: MonoAssemblyPreLoadFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_install_assembly_refonly_preload_hook(
        func: MonoAssemblyPreLoadFunc,
        user_data: *mut ::std::os::raw::c_void,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_invoke_load_hook(ass: *mut MonoAssembly);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_new(name: *const ::std::os::raw::c_char) -> *mut MonoAssemblyName;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_get_name(
        aname: *mut MonoAssemblyName,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_get_culture(
        aname: *mut MonoAssemblyName,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_get_version(
        aname: *mut MonoAssemblyName,
        minor: *mut u16,
        build: *mut u16,
        revision: *mut u16,
    ) -> u16;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_get_pubkeytoken(aname: *mut MonoAssemblyName) -> *mut mono_byte;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_assembly_name_free(aname: *mut MonoAssemblyName);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoBundledAssembly {
    pub name: *const ::std::os::raw::c_char,
    pub data: *const ::std::os::raw::c_uchar,
    pub size: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_MonoBundledAssembly() {
    const UNINIT: ::std::mem::MaybeUninit<MonoBundledAssembly> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoBundledAssembly>(),
        24usize,
        concat!("Size of: ", stringify!(MonoBundledAssembly))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoBundledAssembly>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoBundledAssembly))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoBundledAssembly),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoBundledAssembly),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).size) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoBundledAssembly),
            "::",
            stringify!(size)
        )
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_register_bundled_assemblies(assemblies: *mut *const MonoBundledAssembly);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_register_config_for_assembly(
        assembly_name: *const ::std::os::raw::c_char,
        config_xml: *const ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_register_symfile_for_assembly(
        assembly_name: *const ::std::os::raw::c_char,
        raw_contents: *const mono_byte,
        size: ::std::os::raw::c_int,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_register_machine_config(config_xml: *const ::std::os::raw::c_char);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_rootdir();
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_dirs(
        assembly_dir: *const ::std::os::raw::c_char,
        config_dir: *const ::std::os::raw::c_char,
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_set_assemblies_path(path: *const ::std::os::raw::c_char);
}
pub type MonoDisIndenter = ::std::option::Option<
    unsafe extern "C" fn(
        dh: *mut MonoDisHelper,
        method: *mut MonoMethod,
        ip_offset: u32,
    ) -> *mut ::std::os::raw::c_char,
>;
pub type MonoDisTokener = ::std::option::Option<
    unsafe extern "C" fn(
        dh: *mut MonoDisHelper,
        method: *mut MonoMethod,
        token: u32,
    ) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoDisHelper {
    pub newline: *const ::std::os::raw::c_char,
    pub label_format: *const ::std::os::raw::c_char,
    pub label_target: *const ::std::os::raw::c_char,
    pub indenter: MonoDisIndenter,
    pub tokener: MonoDisTokener,
    pub user_data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_MonoDisHelper() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDisHelper> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDisHelper>(),
        48usize,
        concat!("Size of: ", stringify!(MonoDisHelper))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDisHelper>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoDisHelper))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).newline) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(newline)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label_format) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(label_format)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label_target) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(label_target)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).indenter) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(indenter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).tokener) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(tokener)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).user_data) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDisHelper),
            "::",
            stringify!(user_data)
        )
    );
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_disasm_code_one(
        dh: *mut MonoDisHelper,
        method: *mut MonoMethod,
        ip: *const mono_byte,
        endp: *mut *const mono_byte,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_disasm_code(
        dh: *mut MonoDisHelper,
        method: *mut MonoMethod,
        ip: *const mono_byte,
        end: *const mono_byte,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_type_full_name(type_: *mut MonoType) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_signature_get_desc(
        sig: *mut MonoMethodSignature,
        include_namespace: mono_bool,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_context_get_desc(context: *mut MonoGenericContext) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_new(
        name: *const ::std::os::raw::c_char,
        include_namespace: mono_bool,
    ) -> *mut MonoMethodDesc;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_from_method(method: *mut MonoMethod) -> *mut MonoMethodDesc;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_free(desc: *mut MonoMethodDesc);
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_match(desc: *mut MonoMethodDesc, method: *mut MonoMethod) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_is_full(desc: *mut MonoMethodDesc) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_full_match(
        desc: *mut MonoMethodDesc,
        method: *mut MonoMethod,
    ) -> mono_bool;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_search_in_class(
        desc: *mut MonoMethodDesc,
        klass: *mut MonoClass,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_desc_search_in_image(
        desc: *mut MonoMethodDesc,
        image: *mut MonoImage,
    ) -> *mut MonoMethod;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_full_name(
        method: *mut MonoMethod,
        signature: mono_bool,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_method_get_reflection_name(method: *mut MonoMethod) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_field_full_name(field: *mut MonoClassField) -> *mut ::std::os::raw::c_char;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_threads_attach_coop(domain: *mut MonoDomain, dummy: *mut gpointer) -> gpointer;
}
#[link(name = "monosgen-2.0")] extern "C" {
    pub fn mono_threads_detach_coop(cookie: gpointer, dummy: *mut gpointer);
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MonoDecimal {
    pub u: MonoDecimal__bindgen_ty_1,
    pub reserved: u16,
    pub Hi32: u32,
    pub v: MonoDecimal__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MonoDecimal__bindgen_ty_1 {
    pub u: MonoDecimal__bindgen_ty_1__bindgen_ty_1,
    pub signscale: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoDecimal__bindgen_ty_1__bindgen_ty_1 {
    pub sign: u8,
    pub scale: u8,
}
#[test]
fn bindgen_test_layout_MonoDecimal__bindgen_ty_1__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDecimal__bindgen_ty_1__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDecimal__bindgen_ty_1__bindgen_ty_1>(),
        2usize,
        concat!(
            "Size of: ",
            stringify!(MonoDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDecimal__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(MonoDecimal__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sign) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(sign)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(scale)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoDecimal__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDecimal__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Size of: ", stringify!(MonoDecimal__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDecimal__bindgen_ty_1>(),
        2usize,
        concat!("Alignment of ", stringify!(MonoDecimal__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_1),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).signscale) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_1),
            "::",
            stringify!(signscale)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MonoDecimal__bindgen_ty_2 {
    pub v: MonoDecimal__bindgen_ty_2__bindgen_ty_1,
    pub Lo64: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoDecimal__bindgen_ty_2__bindgen_ty_1 {
    pub Lo32: u32,
    pub Mid32: u32,
}
#[test]
fn bindgen_test_layout_MonoDecimal__bindgen_ty_2__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDecimal__bindgen_ty_2__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDecimal__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(MonoDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDecimal__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(MonoDecimal__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lo32) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Lo32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Mid32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(Mid32)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoDecimal__bindgen_ty_2() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDecimal__bindgen_ty_2> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(MonoDecimal__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDecimal__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoDecimal__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_2),
            "::",
            stringify!(v)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Lo64) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal__bindgen_ty_2),
            "::",
            stringify!(Lo64)
        )
    );
}
#[test]
fn bindgen_test_layout_MonoDecimal() {
    const UNINIT: ::std::mem::MaybeUninit<MonoDecimal> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoDecimal>(),
        16usize,
        concat!("Size of: ", stringify!(MonoDecimal))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoDecimal>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoDecimal))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).u) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal),
            "::",
            stringify!(u)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).reserved) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal),
            "::",
            stringify!(reserved)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hi32) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal),
            "::",
            stringify!(Hi32)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).v) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoDecimal),
            "::",
            stringify!(v)
        )
    );
}

// --- Embeddinator-4000 bindings --- //
pub const E4KDateTimeKind_E4KDateTimeKind_Unspecified: E4KDateTimeKind = 0;
pub const E4KDateTimeKind_E4KDateTimeKind_Utc: E4KDateTimeKind = 1;
pub const E4KDateTimeKind_E4KDateTimeKind_Local: E4KDateTimeKind = 2;
pub type E4KDateTimeKind = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E4KDateTime {
    pub DateData: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_E4KDateTime() {
    const UNINIT: ::std::mem::MaybeUninit<E4KDateTime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<E4KDateTime>(),
        8usize,
        concat!("Size of: ", stringify!(E4KDateTime))
    );
    assert_eq!(
        ::std::mem::align_of::<E4KDateTime>(),
        8usize,
        concat!("Alignment of ", stringify!(E4KDateTime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DateData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(E4KDateTime),
            "::",
            stringify!(DateData)
        )
    );
}

#[doc = " Represents a managed-to-native binding context."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mono_embeddinator_context_t {
    pub domain: *mut MonoDomain,
}
#[test]
fn bindgen_test_layout_mono_embeddinator_context_t() {
    const UNINIT: ::std::mem::MaybeUninit<mono_embeddinator_context_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mono_embeddinator_context_t>(),
        8usize,
        concat!("Size of: ", stringify!(mono_embeddinator_context_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mono_embeddinator_context_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mono_embeddinator_context_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).domain) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mono_embeddinator_context_t),
            "::",
            stringify!(domain)
        )
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Initializes a managed-to-native binding context.\n Returns a boolean indicating success or failure."]
    pub fn mono_embeddinator_init(
        ctx: *mut mono_embeddinator_context_t,
        domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Destroys the managed-to-native binding context.\n Returns a boolean indicating success or failure."]
    pub fn mono_embeddinator_destroy(
        ctx: *mut mono_embeddinator_context_t,
    ) -> ::std::os::raw::c_int;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Returns the current context."]
    pub fn mono_embeddinator_get_context() -> *mut mono_embeddinator_context_t;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Override the default path (current executable) where assemblies will be loaded."]
    pub fn mono_embeddinator_set_assembly_path(path: *const ::std::os::raw::c_char);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn mono_embeddinator_set_runtime_assembly_path(path: *const ::std::os::raw::c_char);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Sets the current context."]
    pub fn mono_embeddinator_set_context(ctx: *mut mono_embeddinator_context_t);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Loads an assembly into the context."]
    pub fn mono_embeddinator_load_assembly(
        ctx: *mut mono_embeddinator_context_t,
        assembly: *const ::std::os::raw::c_char,
    ) -> *mut MonoImage;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Searches and returns the path to the given managed assembly."]
    pub fn mono_embeddinator_search_assembly(
        assembly: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[doc = " Represents the assembly load hook function type"]
pub type mono_embeddinator_assembly_load_hook_t = ::std::option::Option<
    unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char) -> *mut MonoAssembly,
>;
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Installs an hook that loads the given managed assembly (or NULL if the assembly can't be found).\n Returns the previously installed hook."]
    pub fn mono_embeddinator_install_assembly_load_hook(
        hook: mono_embeddinator_assembly_load_hook_t,
    ) -> mono_embeddinator_assembly_load_hook_t;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Searches and returns for the Mono class in the given assembly."]
    pub fn mono_embeddinator_search_class(
        assembly: *const ::std::os::raw::c_char,
        _namespace: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> *mut MonoClass;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Looks up and returns a MonoMethod* for a given Mono class and method name."]
    pub fn mono_embeddinator_lookup_method(
        method_name: *const ::std::os::raw::c_char,
        klass: *mut MonoClass,
    ) -> *mut MonoMethod;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Throws an exception based on a given Mono exception object."]
    pub fn mono_embeddinator_throw_exception(exception: *mut MonoObject);
}
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_OK: mono_embeddinator_error_type_t = 0;
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_EXCEPTION_THROWN:
    mono_embeddinator_error_type_t = 1;
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_ASSEMBLY_OPEN_FAILED:
    mono_embeddinator_error_type_t = 2;
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_CLASS_LOOKUP_FAILED:
    mono_embeddinator_error_type_t = 3;
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_METHOD_LOOKUP_FAILED:
    mono_embeddinator_error_type_t = 4;
pub const mono_embeddinator_error_type_t_MONO_EMBEDDINATOR_MONO_RUNTIME_MISSING_SYMBOLS:
    mono_embeddinator_error_type_t = 5;
#[doc = " Represents the different types of errors to be reported."]
pub type mono_embeddinator_error_type_t = ::std::os::raw::c_int;
#[doc = " Represents the error type and associated data."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mono_embeddinator_error_t {
    pub type_: mono_embeddinator_error_type_t,
    pub exception: *mut MonoException,
    pub string: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_mono_embeddinator_error_t() {
    const UNINIT: ::std::mem::MaybeUninit<mono_embeddinator_error_t> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<mono_embeddinator_error_t>(),
        24usize,
        concat!("Size of: ", stringify!(mono_embeddinator_error_t))
    );
    assert_eq!(
        ::std::mem::align_of::<mono_embeddinator_error_t>(),
        8usize,
        concat!("Alignment of ", stringify!(mono_embeddinator_error_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mono_embeddinator_error_t),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).exception) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mono_embeddinator_error_t),
            "::",
            stringify!(exception)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).string) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mono_embeddinator_error_t),
            "::",
            stringify!(string)
        )
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Converts an error object to its string representation."]
    pub fn mono_embeddinator_error_to_string(
        error: mono_embeddinator_error_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Fires an error and calls the installed error hook for handling."]
    pub fn mono_embeddinator_error(error: mono_embeddinator_error_t);
}
#[doc = " Represents the error report hook function type."]
pub type mono_embeddinator_error_report_hook_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: mono_embeddinator_error_t)>;
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Installs an hook that is called for each error reported."]
    pub fn mono_embeddinator_install_error_report_hook(
        hook: mono_embeddinator_error_report_hook_t,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoEmbedObject {
    pub _class: *mut MonoClass,
    pub _handle: u32,
}
#[test]
fn bindgen_test_layout_MonoEmbedObject() {
    const UNINIT: ::std::mem::MaybeUninit<MonoEmbedObject> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoEmbedObject>(),
        16usize,
        concat!("Size of: ", stringify!(MonoEmbedObject))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoEmbedObject>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoEmbedObject))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._class) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoEmbedObject),
            "::",
            stringify!(_class)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr)._handle) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoEmbedObject),
            "::",
            stringify!(_handle)
        )
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Creates a MonoEmbedObject support object from a Mono object instance."]
    pub fn mono_embeddinator_create_object(
        instance: *mut MonoObject,
    ) -> *mut ::std::os::raw::c_void;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Initializes a MonoEmbedObject object from a Mono object instance."]
    pub fn mono_embeddinator_init_object(object: *mut MonoEmbedObject, instance: *mut MonoObject);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Destroys a MonoEmbedObject object for a Mono object instance."]
    pub fn mono_embeddinator_destroy_object(object: *mut MonoEmbedObject);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Gets CultureInfo.InvariantCulture MonoObject."]
    pub fn mono_embeddinator_get_cultureinfo_invariantculture_object() -> *mut MonoObject;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Gets decimal MonoClass."]
    pub fn mono_embeddinator_get_decimal_class() -> *mut MonoClass;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Gets DateTime MonoClass."]
    pub fn mono_embeddinator_get_datetime_class() -> *mut MonoClass;
}
#[doc = " Arrays"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MonoEmbedArray {
    pub array: *mut GArray,
}
#[test]
fn bindgen_test_layout_MonoEmbedArray() {
    const UNINIT: ::std::mem::MaybeUninit<MonoEmbedArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<MonoEmbedArray>(),
        8usize,
        concat!("Size of: ", stringify!(MonoEmbedArray))
    );
    assert_eq!(
        ::std::mem::align_of::<MonoEmbedArray>(),
        8usize,
        concat!("Alignment of ", stringify!(MonoEmbedArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).array) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MonoEmbedArray),
            "::",
            stringify!(array)
        )
    );
}
#[doc = " Arrays"]
pub type _BoolArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _CharArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _SByteArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ByteArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _Int16Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _UInt16Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _Int32Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _UInt32Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _Int64Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _UInt64Array = MonoEmbedArray;
#[doc = " Arrays"]
pub type _SingleArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _DoubleArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _StringArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _DecimalArray = MonoEmbedArray;
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Performs marshaling of a given MonoDecimal to a GLib string."]
    pub fn mono_embeddinator_decimal_to_gstring(decimal: MonoDecimal) -> *mut GString;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Performs marshaling of a given MonoDecimal to a GLib string."]
    pub fn mono_embeddinator_string_to_decimal(
        number: *const ::std::os::raw::c_char,
    ) -> MonoDecimal;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    #[doc = " Performs marshaling of a given MonoString to a GLib string."]
    pub fn mono_embeddinator_marshal_string_to_gstring(
        g_string: *mut GString,
        mono_string: *mut MonoString,
    );
}
pub type System_IDisposable = MonoEmbedObject;
pub type System_Exception = MonoEmbedObject;
pub type System_Runtime_Serialization_ISerializable = MonoEmbedObject;
pub type System_Runtime_InteropServices__Exception = MonoEmbedObject;
pub type System_Collections_IEnumerable = MonoEmbedObject;
pub type System_Collections_Generic_IDictionary_2 = MonoEmbedObject;
pub type System_Collections_Generic_ICollection_1 = MonoEmbedObject;
pub type System_Collections_Generic_IEnumerable_1 = MonoEmbedObject;
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_IDisposable_Dispose(object: *mut System_IDisposable);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_new() -> *mut System_Exception;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_new_1(message: *const ::std::os::raw::c_char) -> *mut System_Exception;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_ToString(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_Message(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_StackTrace(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_HelpLink(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_set_HelpLink(
        object: *mut System_Exception,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_Source(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_set_Source(
        object: *mut System_Exception,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_RemoteStackTrace(
        object: *mut System_Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_HResult(object: *mut System_Exception) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_set_HResult(object: *mut System_Exception, value: i32);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Exception_get_IsTransient(object: *mut System_Exception) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_ToString(
        object: *mut System_Runtime_InteropServices__Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_get_Message(
        object: *mut System_Runtime_InteropServices__Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_get_StackTrace(
        object: *mut System_Runtime_InteropServices__Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_get_HelpLink(
        object: *mut System_Runtime_InteropServices__Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_set_HelpLink(
        object: *mut System_Runtime_InteropServices__Exception,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_get_Source(
        object: *mut System_Runtime_InteropServices__Exception,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn System_Runtime_InteropServices__Exception_set_Source(
        object: *mut System_Runtime_InteropServices__Exception,
        value: *const ::std::os::raw::c_char,
    );
}


// --- ThermoRawFileParser bindings --- //
pub const ThermoRawFileParser_OutputFormat_ThermoRawFileParser_OutputFormat_MGF:
    ThermoRawFileParser_OutputFormat = 0;
pub const ThermoRawFileParser_OutputFormat_ThermoRawFileParser_OutputFormat_MzML:
    ThermoRawFileParser_OutputFormat = 1;
pub const ThermoRawFileParser_OutputFormat_ThermoRawFileParser_OutputFormat_IndexMzML:
    ThermoRawFileParser_OutputFormat = 2;
pub const ThermoRawFileParser_OutputFormat_ThermoRawFileParser_OutputFormat_Parquet:
    ThermoRawFileParser_OutputFormat = 3;
pub const ThermoRawFileParser_OutputFormat_ThermoRawFileParser_OutputFormat_NONE:
    ThermoRawFileParser_OutputFormat = 4;
pub type ThermoRawFileParser_OutputFormat = ::std::os::raw::c_int;
pub const ThermoRawFileParser_MetadataFormat_ThermoRawFileParser_MetadataFormat_JSON:
    ThermoRawFileParser_MetadataFormat = 0;
pub const ThermoRawFileParser_MetadataFormat_ThermoRawFileParser_MetadataFormat_TXT:
    ThermoRawFileParser_MetadataFormat = 1;
pub const ThermoRawFileParser_MetadataFormat_ThermoRawFileParser_MetadataFormat_PARQUET:
    ThermoRawFileParser_MetadataFormat = 2;
pub const ThermoRawFileParser_MetadataFormat_ThermoRawFileParser_MetadataFormat_NONE:
    ThermoRawFileParser_MetadataFormat = 3;
pub type ThermoRawFileParser_MetadataFormat = ::std::os::raw::c_int;
pub const ThermoRawFileParser_LogFormat_ThermoRawFileParser_LogFormat_SILENT:
    ThermoRawFileParser_LogFormat = 0;
pub const ThermoRawFileParser_LogFormat_ThermoRawFileParser_LogFormat_VERBOSE:
    ThermoRawFileParser_LogFormat = 1;
pub const ThermoRawFileParser_LogFormat_ThermoRawFileParser_LogFormat_DEFAULT:
    ThermoRawFileParser_LogFormat = 2;
pub const ThermoRawFileParser_LogFormat_ThermoRawFileParser_LogFormat_NONE:
    ThermoRawFileParser_LogFormat = 3;
pub type ThermoRawFileParser_LogFormat = ::std::os::raw::c_int;
pub const ThermoRawFileParser_Writer_MzML_IndexTypeName_ThermoRawFileParser_Writer_MzML_IndexTypeName_spectrum : ThermoRawFileParser_Writer_MzML_IndexTypeName = 0 ;
pub const ThermoRawFileParser_Writer_MzML_IndexTypeName_ThermoRawFileParser_Writer_MzML_IndexTypeName_chromatogram : ThermoRawFileParser_Writer_MzML_IndexTypeName = 1 ;
pub type ThermoRawFileParser_Writer_MzML_IndexTypeName = ::std::os::raw::c_int;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_CVParamTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_UserParamTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ScanTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_PrecursorTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ProductTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_BinaryDataArrayTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_CVTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SourceFileTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SampleTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SoftwareTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SourceFileRefTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ScanSettingsTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SourceComponentTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_AnalyzerComponentTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_DetectorComponentTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_InstrumentConfigurationTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ProcessingMethodTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_DataProcessingTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_SpectrumTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_ChromatogramTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_OffsetTypeArray = MonoEmbedArray;
#[doc = " Arrays"]
pub type _ThermoRawFileParser_Writer_MzML_IndexTypeArray = MonoEmbedArray;
pub type ThermoRawFileParser_RawFileWrapper = MonoEmbedObject;
pub type ThermoRawFileParser_ParseInput = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_S3Loader = MonoEmbedObject;
pub type ThermoRawFileParser_MainClass = MonoEmbedObject;
pub type ThermoRawFileParser_RawFileParserException = MonoEmbedObject;
pub type ThermoRawFileParser_RawFileParser = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_SpectrumWrapper = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SpectrumType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ParamGroupType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_CVParamType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_UserParamType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ScanListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ScanType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ScanWindowListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_PrecursorListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_PrecursorType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SelectedIonListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ProductListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ProductType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_BinaryDataArrayType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_ISpectrumWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_Metadata = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_CVTerm = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_ProxiCvTerm = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MetadataWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MgfSpectrumWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_SpectrumWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzMlSpectrumWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_OntologyMapping = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_ParquetSpectrumWriter = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_PScan = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_mzMLType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_CVListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_CVType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_FileDescriptionType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SourceFileListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SourceFileType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SampleListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SampleType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SoftwareListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SoftwareType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ScanSettingsListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ScanSettingsType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SourceFileRefListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SourceFileRefType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_TargetListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ComponentListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SourceComponentType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ComponentType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_AnalyzerComponentType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_DetectorComponentType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SoftwareRefType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_DataProcessingListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_DataProcessingType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ProcessingMethodType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_RunType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_SpectrumListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ChromatogramListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_ChromatogramType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_OffsetType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_IndexType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_IndexListType = MonoEmbedObject;
pub type ThermoRawFileParser_Writer_MzML_indexedmzML = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_JSONInputUnit = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_JSONParser = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicData = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicOutputMeta = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicExecutor = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicParameters = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicMeta = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicReader = MonoEmbedObject;
pub type ThermoRawFileParser_XIC_XicUnit = MonoEmbedObject;
pub type ThermoRawFileParser_Util_LimitedSizeDictionary_2 = MonoEmbedObject;
pub type ThermoRawFileParser_Util_TKey = MonoEmbedObject;
pub type ThermoRawFileParser_Util_TValue = MonoEmbedObject;
pub type ThermoRawFileParser_Util_PeptideData = MonoEmbedObject;
pub type ThermoRawFileParser_Util_Peptide = MonoEmbedObject;
pub type ThermoRawFileParser_Query_ProxiSpectrum = MonoEmbedObject;
pub type ThermoRawFileParser_Query_QueryParameters = MonoEmbedObject;
pub type ThermoRawFileParser_Query_QueryExecutor = MonoEmbedObject;
pub type ThermoRawFileParser_Query_ProxiSpectrumReader = MonoEmbedObject;
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_Dispose(
        object: *mut ThermoRawFileParser_RawFileWrapper,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_get_FirstScanNumber(
        object: *mut ThermoRawFileParser_RawFileWrapper,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_set_FirstScanNumber(
        object: *mut ThermoRawFileParser_RawFileWrapper,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_get_LastScanNumber(
        object: *mut ThermoRawFileParser_RawFileWrapper,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_set_LastScanNumber(
        object: *mut ThermoRawFileParser_RawFileWrapper,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_get_ParseInput(
        object: *mut ThermoRawFileParser_RawFileWrapper,
    ) -> *mut ThermoRawFileParser_ParseInput;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileWrapper_set_ParseInput(
        object: *mut ThermoRawFileParser_RawFileWrapper,
        value: *mut ThermoRawFileParser_ParseInput,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_new() -> *mut ThermoRawFileParser_ParseInput;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_new_1(
        rawFilePath: *const ::std::os::raw::c_char,
        rawDirectoryPath: *const ::std::os::raw::c_char,
        outputDirectory: *const ::std::os::raw::c_char,
        outputFormat: ThermoRawFileParser_OutputFormat,
    ) -> *mut ThermoRawFileParser_ParseInput;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_InitializeS3Bucket(
        object: *mut ThermoRawFileParser_ParseInput,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_RawDirectoryPath(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_RawDirectoryPath(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_RawFilePath(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_RawFilePath(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_UseInMemoryWriter(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_UseInMemoryWriter(
        object: *mut ThermoRawFileParser_ParseInput,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_OutputDirectory(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_OutputDirectory(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_OutputFile(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_OutputFile(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_OutputFormat(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> ThermoRawFileParser_OutputFormat;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_OutputFormat(
        object: *mut ThermoRawFileParser_ParseInput,
        value: ThermoRawFileParser_OutputFormat,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_MetadataFormat(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> ThermoRawFileParser_MetadataFormat;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_MetadataFormat(
        object: *mut ThermoRawFileParser_ParseInput,
        value: ThermoRawFileParser_MetadataFormat,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_MetadataOutputFile(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_MetadataOutputFile(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_Gzip(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_Gzip(
        object: *mut ThermoRawFileParser_ParseInput,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_NoPeakPicking(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_NoPeakPicking(
        object: *mut ThermoRawFileParser_ParseInput,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_NoZlibCompression(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_NoZlibCompression(
        object: *mut ThermoRawFileParser_ParseInput,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_LogFormat(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> ThermoRawFileParser_LogFormat;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_LogFormat(
        object: *mut ThermoRawFileParser_ParseInput,
        value: ThermoRawFileParser_LogFormat,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_IgnoreInstrumentErrors(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_IgnoreInstrumentErrors(
        object: *mut ThermoRawFileParser_ParseInput,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_S3Loader(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *mut ThermoRawFileParser_Writer_S3Loader;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_S3Loader(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *mut ThermoRawFileParser_Writer_S3Loader,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_S3AccessKeyId(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_S3AccessKeyId(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_S3SecretAccessKey(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_S3SecretAccessKey(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_S3Url(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_S3Url(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_BucketName(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_BucketName(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_get_RawFileNameWithoutExtension(
        object: *mut ThermoRawFileParser_ParseInput,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_ParseInput_set_RawFileNameWithoutExtension(
        object: *mut ThermoRawFileParser_ParseInput,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_S3Loader_new(
        s3url: *const ::std::os::raw::c_char,
        s3AccessKeyId: *const ::std::os::raw::c_char,
        s3SecretAccessKey: *const ::std::os::raw::c_char,
        bucketName: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Writer_S3Loader;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_S3Loader_loadObjectToS3(
        object: *mut ThermoRawFileParser_Writer_S3Loader,
        filePath: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        contentType: *const ::std::os::raw::c_char,
        label: *const ::std::os::raw::c_char,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_new(
        spectrum: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        masses: _DoubleArray,
        intensities: _DoubleArray,
    ) -> *mut ThermoRawFileParser_Writer_SpectrumWrapper;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_getPeaksCount(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_GetMzValue(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        pos: i32,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_GetIntensityValue(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        pos: i32,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_CopyMzListToPointer(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        ptrAddress: i64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_CopyIntensityListToPointer(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        ptrAddress: i64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_CopyDataToPointers(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        mzPtrAddress: i64,
        intensityPtrAddress: i64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_get_Spectrum(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SpectrumType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_set_Spectrum(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        value: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_get_Masses(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_set_Masses(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_get_Intensities(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWrapper_set_Intensities(
        object: *mut ThermoRawFileParser_Writer_SpectrumWrapper,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SpectrumType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_scanList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_scanList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *mut ThermoRawFileParser_Writer_MzML_ScanListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_precursorList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_PrecursorListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_precursorList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *mut ThermoRawFileParser_Writer_MzML_PrecursorListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_productList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ProductListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_productList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *mut ThermoRawFileParser_Writer_MzML_ProductListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_binaryDataArrayList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_binaryDataArrayList(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_spotID(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_spotID(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_index(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_index(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_defaultArrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_defaultArrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_get_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumType_set_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanListType_get_scan(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ScanTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanListType_set_scan(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanListType,
        value: _ThermoRawFileParser_Writer_MzML_ScanTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_get_scanWindowList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_set_scanWindowList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
        value: *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_get_spectrumRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_set_spectrumRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_get_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_set_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_get_externalSpectrumID(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_set_externalSpectrumID(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_get_instrumentConfigurationRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanType_set_instrumentConfigurationRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanWindowListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanWindowListType_get_scanWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanWindowListType_set_scanWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType,
        value: _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanWindowListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanWindowListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanWindowListType,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_get_referenceableParamGroupRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    ) -> _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_set_referenceableParamGroupRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
        value: _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_get_cvParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    ) -> _ThermoRawFileParser_Writer_MzML_CVParamTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_set_cvParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
        value: _ThermoRawFileParser_Writer_MzML_CVParamTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_get_userParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    ) -> _ThermoRawFileParser_Writer_MzML_UserParamTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ParamGroupType_set_userParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
        value: _ThermoRawFileParser_Writer_MzML_UserParamTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType_get_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType_set_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupRefType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_CVParamType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_cvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_cvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_accession(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_accession(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_value(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_value(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_name(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_name(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_unitAccession(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_unitAccession(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_unitName(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_unitName(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_get_unitCvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVParamType_set_unitCvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_CVParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_UserParamType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_name(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_name(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_type(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_type(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_value(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_value(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_unitAccession(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_unitAccession(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_unitName(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_unitName(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_get_unitCvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_UserParamType_set_unitCvRef(
        object: *mut ThermoRawFileParser_Writer_MzML_UserParamType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_PrecursorListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorListType_get_precursor(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorListType,
    ) -> _ThermoRawFileParser_Writer_MzML_PrecursorTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorListType_set_precursor(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorListType,
        value: _ThermoRawFileParser_Writer_MzML_PrecursorTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_PrecursorType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_isolationWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_isolationWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_selectedIonList(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_selectedIonList(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_activation(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_activation(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_spectrumRef(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_spectrumRef(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_get_externalSpectrumID(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_PrecursorType_set_externalSpectrumID(
        object: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SelectedIonListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SelectedIonListType_get_selectedIon(
        object: *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SelectedIonListType_set_selectedIon(
        object: *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType,
        value: _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SelectedIonListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SelectedIonListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SelectedIonListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ProductListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductListType_get_product(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ProductTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductListType_set_product(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductListType,
        value: _ThermoRawFileParser_Writer_MzML_ProductTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ProductType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductType_get_isolationWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProductType_set_isolationWindow(
        object: *mut ThermoRawFileParser_Writer_MzML_ProductType,
        value: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType_get_binaryDataArray(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
    ) -> _ThermoRawFileParser_Writer_MzML_BinaryDataArrayTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType_set_binaryDataArray(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
        value: _ThermoRawFileParser_Writer_MzML_BinaryDataArrayTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_get_binary(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
    ) -> _ByteArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_set_binary(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
        value: _ByteArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_get_arrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_set_arrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_get_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_set_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_get_encodedLength(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_BinaryDataArrayType_set_encodedLength(
        object: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_mzMLType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_cvList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_CVListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_cvList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_CVListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_fileDescription(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_fileDescription(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_referenceableParamGroupList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_referenceableParamGroupList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_sampleList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SampleListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_sampleList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_SampleListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_softwareList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SoftwareListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_softwareList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_SoftwareListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_scanSettingsList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_scanSettingsList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_instrumentConfigurationList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_instrumentConfigurationList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_dataProcessingList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_dataProcessingList(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_run(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_RunType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_run(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *mut ThermoRawFileParser_Writer_MzML_RunType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_accession(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_accession(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_version(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_version(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_mzMLType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_CVListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVListType_get_CvType(
        object: *mut ThermoRawFileParser_Writer_MzML_CVListType,
    ) -> _ThermoRawFileParser_Writer_MzML_CVTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVListType_set_CvType(
        object: *mut ThermoRawFileParser_Writer_MzML_CVListType,
        value: _ThermoRawFileParser_Writer_MzML_CVTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_CVListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_CVListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_CVType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_get_fullName(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_set_fullName(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_get_version(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_set_version(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_get_URI(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_CVType_set_URI(
        object: *mut ThermoRawFileParser_Writer_MzML_CVType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_get_fileContent(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_set_fileContent(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
        value: *mut ThermoRawFileParser_Writer_MzML_ParamGroupType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_get_sourceFileList(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_set_sourceFileList(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
        value: *mut ThermoRawFileParser_Writer_MzML_SourceFileListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_get_contact(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
    ) -> _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_FileDescriptionType_set_contact(
        object: *mut ThermoRawFileParser_Writer_MzML_FileDescriptionType,
        value: _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileListType_get_sourceFile(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SourceFileTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileListType_set_sourceFile(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileListType,
        value: _ThermoRawFileParser_Writer_MzML_SourceFileTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_get_name(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_set_name(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_get_location(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileType_set_location(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType_get_referenceableParamGroup(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType_set_referenceableParamGroup(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType,
        value: _ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_get_cvParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
    ) -> _ThermoRawFileParser_Writer_MzML_CVParamTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_set_cvParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
        value: _ThermoRawFileParser_Writer_MzML_CVParamTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_get_userParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
    ) -> _ThermoRawFileParser_Writer_MzML_UserParamTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_set_userParam(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
        value: _ThermoRawFileParser_Writer_MzML_UserParamTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ReferenceableParamGroupType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SampleListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleListType_get_sample(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SampleTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleListType_set_sample(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleListType,
        value: _ThermoRawFileParser_Writer_MzML_SampleTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SampleType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleType_get_name(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SampleType_set_name(
        object: *mut ThermoRawFileParser_Writer_MzML_SampleType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SoftwareListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareListType_get_software(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SoftwareTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareListType_set_software(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareListType,
        value: _ThermoRawFileParser_Writer_MzML_SoftwareTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SoftwareType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareType_get_version(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareType_set_version(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsListType_get_scanSettings(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ScanSettingsTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsListType_set_scanSettings(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType,
        value: _ThermoRawFileParser_Writer_MzML_ScanSettingsTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_get_sourceFileRefList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_set_sourceFileRefList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
        value: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_get_targetList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_TargetListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_set_targetList(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
        value: *mut ThermoRawFileParser_Writer_MzML_TargetListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ScanSettingsType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ScanSettingsType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefListType_get_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SourceFileRefTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefListType_set_sourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType,
        value: _ThermoRawFileParser_Writer_MzML_SourceFileRefTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceFileRefType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefType_get_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceFileRefType_set_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_SourceFileRefType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_TargetListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_TargetListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_TargetListType_get_target(
        object: *mut ThermoRawFileParser_Writer_MzML_TargetListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_TargetListType_set_target(
        object: *mut ThermoRawFileParser_Writer_MzML_TargetListType,
        value: _ThermoRawFileParser_Writer_MzML_ParamGroupTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_TargetListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_TargetListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_TargetListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_TargetListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType_get_instrumentConfiguration(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType,
    ) -> _ThermoRawFileParser_Writer_MzML_InstrumentConfigurationTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType_set_instrumentConfiguration(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType,
        value: _ThermoRawFileParser_Writer_MzML_InstrumentConfigurationTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_get_componentList(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ComponentListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_set_componentList(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
        value: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_get_softwareRef(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SoftwareRefType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_set_softwareRef(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
        value: *mut ThermoRawFileParser_Writer_MzML_SoftwareRefType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_get_scanSettingsRef(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType_set_scanSettingsRef(
        object: *mut ThermoRawFileParser_Writer_MzML_InstrumentConfigurationType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ComponentListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_get_source(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SourceComponentTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_set_source(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
        value: _ThermoRawFileParser_Writer_MzML_SourceComponentTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_get_analyzer(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
    ) -> _ThermoRawFileParser_Writer_MzML_AnalyzerComponentTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_set_analyzer(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
        value: _ThermoRawFileParser_Writer_MzML_AnalyzerComponentTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_get_detector(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
    ) -> _ThermoRawFileParser_Writer_MzML_DetectorComponentTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_set_detector(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
        value: _ThermoRawFileParser_Writer_MzML_DetectorComponentTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SourceComponentType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SourceComponentType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ComponentType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentType_get_order(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentType,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ComponentType_set_order(
        object: *mut ThermoRawFileParser_Writer_MzML_ComponentType,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_AnalyzerComponentType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_AnalyzerComponentType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DetectorComponentType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_DetectorComponentType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareRefType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SoftwareRefType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareRefType_get_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareRefType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SoftwareRefType_set_ref(
        object: *mut ThermoRawFileParser_Writer_MzML_SoftwareRefType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingListType_get_dataProcessing(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType,
    ) -> _ThermoRawFileParser_Writer_MzML_DataProcessingTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingListType_set_dataProcessing(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType,
        value: _ThermoRawFileParser_Writer_MzML_DataProcessingTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_DataProcessingType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingType_get_processingMethod(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingType,
    ) -> _ThermoRawFileParser_Writer_MzML_ProcessingMethodTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingType_set_processingMethod(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingType,
        value: _ThermoRawFileParser_Writer_MzML_ProcessingMethodTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_DataProcessingType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_DataProcessingType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProcessingMethodType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ProcessingMethodType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProcessingMethodType_get_order(
        object: *mut ThermoRawFileParser_Writer_MzML_ProcessingMethodType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProcessingMethodType_set_order(
        object: *mut ThermoRawFileParser_Writer_MzML_ProcessingMethodType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProcessingMethodType_get_softwareRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ProcessingMethodType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ProcessingMethodType_set_softwareRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ProcessingMethodType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_RunType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_spectrumList(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_SpectrumListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_spectrumList(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_chromatogramList(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_chromatogramList(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_defaultInstrumentConfigurationRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_defaultInstrumentConfigurationRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_defaultSourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_defaultSourceFileRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_sampleRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_sampleRef(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_get_startTimeStampSpecified(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_RunType_set_startTimeStampSpecified(
        object: *mut ThermoRawFileParser_Writer_MzML_RunType,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_SpectrumListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_get_spectrum(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
    ) -> _ThermoRawFileParser_Writer_MzML_SpectrumTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_set_spectrum(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
        value: _ThermoRawFileParser_Writer_MzML_SpectrumTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_get_defaultDataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_SpectrumListType_set_defaultDataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_SpectrumListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_get_chromatogram(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
    ) -> _ThermoRawFileParser_Writer_MzML_ChromatogramTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_set_chromatogram(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
        value: _ThermoRawFileParser_Writer_MzML_ChromatogramTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_get_defaultDataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramListType_set_defaultDataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_ChromatogramType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_precursor(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_PrecursorType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_precursor(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *mut ThermoRawFileParser_Writer_MzML_PrecursorType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_product(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_ProductType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_product(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *mut ThermoRawFileParser_Writer_MzML_ProductType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_binaryDataArrayList(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_binaryDataArrayList(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *mut ThermoRawFileParser_Writer_MzML_BinaryDataArrayListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_id(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_index(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_index(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_defaultArrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_defaultArrayLength(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_get_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_ChromatogramType_set_dataProcessingRef(
        object: *mut ThermoRawFileParser_Writer_MzML_ChromatogramType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_OffsetType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_get_idRef(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_set_idRef(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_get_spotID(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_set_spotID(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_get_scanTime(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_set_scanTime(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_get_scanTimeSpecified(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_set_scanTimeSpecified(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_get_Value(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
    ) -> i64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_OffsetType_set_Value(
        object: *mut ThermoRawFileParser_Writer_MzML_OffsetType,
        value: i64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_IndexType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexType_get_offset(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexType,
    ) -> _ThermoRawFileParser_Writer_MzML_OffsetTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexType_set_offset(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexType,
        value: _ThermoRawFileParser_Writer_MzML_OffsetTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexType_get_name(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexType,
    ) -> ThermoRawFileParser_Writer_MzML_IndexTypeName;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexType_set_name(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexType,
        value: ThermoRawFileParser_Writer_MzML_IndexTypeName,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexListType_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_IndexListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexListType_get_index(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexListType,
    ) -> _ThermoRawFileParser_Writer_MzML_IndexTypeArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexListType_set_index(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexListType,
        value: _ThermoRawFileParser_Writer_MzML_IndexTypeArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexListType_get_count(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexListType,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_IndexListType_set_count(
        object: *mut ThermoRawFileParser_Writer_MzML_IndexListType,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_new(
    ) -> *mut ThermoRawFileParser_Writer_MzML_indexedmzML;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_get_mzML(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
    ) -> *mut ThermoRawFileParser_Writer_MzML_mzMLType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_set_mzML(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
        value: *mut ThermoRawFileParser_Writer_MzML_mzMLType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_get_indexList(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
    ) -> *mut ThermoRawFileParser_Writer_MzML_IndexListType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_set_indexList(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
        value: *mut ThermoRawFileParser_Writer_MzML_IndexListType,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_get_fileChecksum(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzML_indexedmzML_set_fileChecksum(
        object: *mut ThermoRawFileParser_Writer_MzML_indexedmzML,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ISpectrumWriter_Write(
        object: *mut ThermoRawFileParser_Writer_ISpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_new() -> *mut ThermoRawFileParser_Writer_Metadata;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_addFileProperty(
        object: *mut ThermoRawFileParser_Writer_Metadata,
        value: *mut ThermoRawFileParser_Writer_CVTerm,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_addInstrumentProperty(
        object: *mut ThermoRawFileParser_Writer_Metadata,
        value: *mut ThermoRawFileParser_Writer_CVTerm,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_addScanSetting(
        object: *mut ThermoRawFileParser_Writer_Metadata,
        value: *mut ThermoRawFileParser_Writer_CVTerm,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_addMSData(
        object: *mut ThermoRawFileParser_Writer_Metadata,
        value: *mut ThermoRawFileParser_Writer_CVTerm,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_Metadata_addSampleProperty(
        object: *mut ThermoRawFileParser_Writer_Metadata,
        value: *mut ThermoRawFileParser_Writer_CVTerm,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_new() -> *mut ThermoRawFileParser_Writer_CVTerm;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_new_1(
        accession: *const ::std::os::raw::c_char,
        cvLabel: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Writer_CVTerm;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_get_accession(
        object: *mut ThermoRawFileParser_Writer_CVTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_get_cvLabel(
        object: *mut ThermoRawFileParser_Writer_CVTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_get_name(
        object: *mut ThermoRawFileParser_Writer_CVTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_CVTerm_get_value(
        object: *mut ThermoRawFileParser_Writer_CVTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_new(
        accession: *const ::std::os::raw::c_char,
        cvGroup: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        valueAccession: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Writer_ProxiCvTerm;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_get_Accession(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_set_Accession(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_get_CvGroup(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_set_CvGroup(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_get_Name(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_set_Name(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_get_Value(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_set_Value(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_get_ValueAccession(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ProxiCvTerm_set_ValueAccession(
        object: *mut ThermoRawFileParser_Writer_ProxiCvTerm,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MetadataWriter_new(
        outputDirectory: *const ::std::os::raw::c_char,
        metadataFileName: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Writer_MetadataWriter;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MgfSpectrumWriter_Write(
        object: *mut ThermoRawFileParser_Writer_MgfSpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_SpectrumWriter_Write(
        object: *mut ThermoRawFileParser_Writer_SpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_new(
        rawFileWrapper: *mut ThermoRawFileParser_RawFileWrapper,
    ) -> *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_getSpectrumWrapper(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
    ) -> *mut ThermoRawFileParser_Writer_SpectrumWrapper;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_GetInMemoryStreamAsString(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_ResetWriter(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        callGC: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_Write(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_CreateXmlWriter(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_CreateXmlWriter_1(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        omitXmlDeclaration: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_WriteHeader(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_WriteSpectrumNoReturn(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        scanNumber: i32,
        index: i32,
        serializeBinaryData: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_WriteSpectrum(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
        scanNumber: i32,
        index: i32,
        serializeBinaryData: bool,
    ) -> *mut ThermoRawFileParser_Writer_SpectrumWrapper;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_MzMlSpectrumWriter_WriteFooter(
        object: *mut ThermoRawFileParser_Writer_MzMlSpectrumWriter,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_OntologyMapping_getInstrumentModel(
        instrumentName: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Writer_MzML_CVParamType;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_ParquetSpectrumWriter_Write(
        object: *mut ThermoRawFileParser_Writer_ParquetSpectrumWriter,
        firstScanNumber: i32,
        lastScanNumber: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_new() -> *mut ThermoRawFileParser_Writer_PScan;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_FileId(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_FileId(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_FileName(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_FileName(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_BasePeakIntensity(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_BasePeakIntensity(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_BasePeakMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_BasePeakMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Baselines(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Baselines(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Charges(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Charges(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_HighMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_HighMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Intensities(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Intensities(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_LowMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_LowMass(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Masses(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Masses(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Noises(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Noises(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_PacketType(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_PacketType(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_RetentionTime(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_RetentionTime(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_Resolutions(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> _DoubleArray;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_Resolutions(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: _DoubleArray,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_ScanNumber(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_ScanNumber(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_ScanType(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_ScanType(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_TIC(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_TIC(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: f64,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_get_MsOrder(
        object: *mut ThermoRawFileParser_Writer_PScan,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Writer_PScan_set_MsOrder(
        object: *mut ThermoRawFileParser_Writer_PScan,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_MainClass_Main(args: _StringArray);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_MainClass_get_Version() -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_MainClass_set_Version(value: *const ::std::os::raw::c_char);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileParserException_new(
    ) -> *mut ThermoRawFileParser_RawFileParserException;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileParserException_new_1(
        message: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_RawFileParserException;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileParser_Parse(parseInput: *mut ThermoRawFileParser_ParseInput);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_RawFileParser_InitRawFile(
        parseInput: *mut ThermoRawFileParser_ParseInput,
    ) -> *mut ThermoRawFileParser_RawFileWrapper;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_new() -> *mut ThermoRawFileParser_XIC_JSONInputUnit;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_HasMzRange(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_HasMz(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_HasSequence(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_get_Sequence(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_set_Sequence(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_get_ToleranceUnit(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_set_ToleranceUnit(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_get_Charge(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> i32;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_set_Charge(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
        value: i32,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_get_Filter(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONInputUnit_set_Filter(
        object: *mut ThermoRawFileParser_XIC_JSONInputUnit,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_JSONParser_ParseJSON(
        jsonString: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_XIC_XicData;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicData_new() -> *mut ThermoRawFileParser_XIC_XicData;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicData_new_1(
        copy: *mut ThermoRawFileParser_XIC_XicData,
    ) -> *mut ThermoRawFileParser_XIC_XicData;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicData_get_OutputMeta(
        object: *mut ThermoRawFileParser_XIC_XicData,
    ) -> *mut ThermoRawFileParser_XIC_XicOutputMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicData_set_OutputMeta(
        object: *mut ThermoRawFileParser_XIC_XicData,
        value: *mut ThermoRawFileParser_XIC_XicOutputMeta,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_new() -> *mut ThermoRawFileParser_XIC_XicOutputMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_new_1(
        copy: *mut ThermoRawFileParser_XIC_XicOutputMeta,
    ) -> *mut ThermoRawFileParser_XIC_XicOutputMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_get_base64(
        object: *mut ThermoRawFileParser_XIC_XicOutputMeta,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_set_base64(
        object: *mut ThermoRawFileParser_XIC_XicOutputMeta,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_get_timeunit(
        object: *mut ThermoRawFileParser_XIC_XicOutputMeta,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicOutputMeta_set_timeunit(
        object: *mut ThermoRawFileParser_XIC_XicOutputMeta,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicExecutor_run(
        parameters: *mut ThermoRawFileParser_XIC_XicParameters,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_new() -> *mut ThermoRawFileParser_XIC_XicParameters;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_new_1(
        copy: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> *mut ThermoRawFileParser_XIC_XicParameters;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_help(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_help(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_jsonFilePath(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_jsonFilePath(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_outputDirectory(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_outputDirectory(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_printJsonExample(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_printJsonExample(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_outputFileName(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_outputFileName(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_base64(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_base64(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_get_stdout(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicParameters_set_stdout(
        object: *mut ThermoRawFileParser_XIC_XicParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicMeta_new() -> *mut ThermoRawFileParser_XIC_XicMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicMeta_new_1(
        copy: *mut ThermoRawFileParser_XIC_XicMeta,
    ) -> *mut ThermoRawFileParser_XIC_XicMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicMeta_get_Filter(
        object: *mut ThermoRawFileParser_XIC_XicMeta,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicMeta_set_Filter(
        object: *mut ThermoRawFileParser_XIC_XicMeta,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicReader_new() -> *mut ThermoRawFileParser_XIC_XicReader;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicReader_ReadXic(
        rawFilePath: *const ::std::os::raw::c_char,
        base64: bool,
        xicData: *mut ThermoRawFileParser_XIC_XicData,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicUnit_new() -> *mut ThermoRawFileParser_XIC_XicUnit;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicUnit_new_1(
        copy: *mut ThermoRawFileParser_XIC_XicUnit,
    ) -> *mut ThermoRawFileParser_XIC_XicUnit;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicUnit_HasValidRanges(
        object: *mut ThermoRawFileParser_XIC_XicUnit,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicUnit_get_Meta(
        object: *mut ThermoRawFileParser_XIC_XicUnit,
    ) -> *mut ThermoRawFileParser_XIC_XicMeta;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_XIC_XicUnit_set_Meta(
        object: *mut ThermoRawFileParser_XIC_XicUnit,
        value: *mut ThermoRawFileParser_XIC_XicMeta,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_PeptideData_get_Proton() -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_PeptideData_set_Proton(value: f64);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_PeptideData_get_H2O() -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_PeptideData_set_H2O(value: f64);
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_Peptide_new() -> *mut ThermoRawFileParser_Util_Peptide;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_Peptide_new_1(
        sequence: *const ::std::os::raw::c_char,
    ) -> *mut ThermoRawFileParser_Util_Peptide;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_Peptide_GetMz(
        object: *mut ThermoRawFileParser_Util_Peptide,
        z: i32,
    ) -> f64;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Util_Peptide_get_Sequence(
        object: *mut ThermoRawFileParser_Util_Peptide,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_ProxiSpectrum_new(
    ) -> *mut ThermoRawFileParser_Query_ProxiSpectrum;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_ProxiSpectrum_AddAttribute(
        object: *mut ThermoRawFileParser_Query_ProxiSpectrum,
        accession: *const ::std::os::raw::c_char,
        cvGroup: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        valueAccession: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_new(
    ) -> *mut ThermoRawFileParser_Query_QueryParameters;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_new_1(
        copy: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> *mut ThermoRawFileParser_Query_QueryParameters;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_help(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_help(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_rawFilePath(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_rawFilePath(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_scans(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_scans(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_outputFile(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> *const ::std::os::raw::c_char;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_outputFile(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: *const ::std::os::raw::c_char,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_noPeakPicking(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_noPeakPicking(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_get_stdout(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> bool;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryParameters_set_stdout(
        object: *mut ThermoRawFileParser_Query_QueryParameters,
        value: bool,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryExecutor_new(
    ) -> *mut ThermoRawFileParser_Query_QueryExecutor;
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_QueryExecutor_Run(
        parameters: *mut ThermoRawFileParser_Query_QueryParameters,
    );
}
#[link(name = "ThermoRawFileParser")] extern "C" {
    pub fn ThermoRawFileParser_Query_ProxiSpectrumReader_new(
        _queryParameters: *mut ThermoRawFileParser_Query_QueryParameters,
    ) -> *mut ThermoRawFileParser_Query_ProxiSpectrumReader;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}